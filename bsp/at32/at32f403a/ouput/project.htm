<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\ouput\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\ouput\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue May 07 13:13:21 2024
<BR><P>
<H3>Maximum Stack Usage =       1220 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task4GSend &rArr; _4G_SendCardInfo &rArr; HY_SendCardInfo &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1bd]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24a]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d9]">rt_kprintf</a><BR>
 <LI><a href="#[6c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">NMI_Handler</a><BR>
 <LI><a href="#[6e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">MemManage_Handler</a><BR>
 <LI><a href="#[6f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">BusFault_Handler</a><BR>
 <LI><a href="#[70]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">UsageFault_Handler</a><BR>
 <LI><a href="#[71]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">SVC_Handler</a><BR>
 <LI><a href="#[72]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">DebugMon_Handler</a><BR>
 <LI><a href="#[b9]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b9]">ACC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b9]">ACC_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[87]">ADC1_2_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[a4]">ADC3_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[142]">Amount_charging</a> from dwin_com_pro.o(i.Amount_charging) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[6f]">BusFault_Handler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[8a]">CAN1_RX1_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[8b]">CAN1_SE_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[b6]">CAN2_RX0_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[b7]">CAN2_RX1_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[b8]">CAN2_SE_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[b5]">CAN2_TX_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[7a]">CRM_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[13f]">Company_code</a> from dwin_com_pro.o(i.Company_code) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[80]">DMA1_Channel1_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[81]">DMA1_Channel2_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[82]">DMA1_Channel3_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[83]">DMA1_Channel4_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[84]">DMA1_Channel5_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[85]">DMA1_Channel6_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[86]">DMA1_Channel7_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[ad]">DMA2_Channel1_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[ae]">DMA2_Channel2_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[af]">DMA2_Channel3_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[b0]">DMA2_Channel4_5_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[bc]">DMA2_Channel6_7_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[72]">DebugMon_Handler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[c0]">EMAC_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[c1]">EMAC_WKUP_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[7b]">EXINT0_IRQHandler</a> from drv_gpio.o(i.EXINT0_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[9d]">EXINT15_10_IRQHandler</a> from drv_gpio.o(i.EXINT15_10_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[7c]">EXINT1_IRQHandler</a> from drv_gpio.o(i.EXINT1_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[7d]">EXINT2_IRQHandler</a> from drv_gpio.o(i.EXINT2_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[7e]">EXINT3_IRQHandler</a> from drv_gpio.o(i.EXINT3_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[7f]">EXINT4_IRQHandler</a> from drv_gpio.o(i.EXINT4_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[8c]">EXINT9_5_IRQHandler</a> from drv_gpio.o(i.EXINT9_5_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[141]">Electric_charing</a> from dwin_com_pro.o(i.Electric_charing) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[79]">FLASH_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[20]">HYDisplayMenu1</a> from dispkeyfunction.o(i.HYDisplayMenu1) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[32]">HYDisplayMenu10</a> from dispkeyfunction.o(i.HYDisplayMenu10) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[34]">HYDisplayMenu11</a> from dispkeyfunction.o(i.HYDisplayMenu11) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[36]">HYDisplayMenu12</a> from dispkeyfunction.o(i.HYDisplayMenu12) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[38]">HYDisplayMenu13</a> from dispkeyfunction.o(i.HYDisplayMenu13) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3a]">HYDisplayMenu14</a> from dispkeyfunction.o(i.HYDisplayMenu14) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3c]">HYDisplayMenu15</a> from dispkeyfunction.o(i.HYDisplayMenu15) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3e]">HYDisplayMenu16</a> from dispkeyfunction.o(i.HYDisplayMenu16) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[40]">HYDisplayMenu17</a> from dispkeyfunction.o(i.HYDisplayMenu17) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[42]">HYDisplayMenu18</a> from dispkeyfunction.o(i.HYDisplayMenu18) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[44]">HYDisplayMenu19</a> from dispkeyfunction.o(i.HYDisplayMenu19) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[22]">HYDisplayMenu2</a> from dispkeyfunction.o(i.HYDisplayMenu2) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[46]">HYDisplayMenu20</a> from dispkeyfunction.o(i.HYDisplayMenu20) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[48]">HYDisplayMenu21</a> from dispkeyfunction.o(i.HYDisplayMenu21) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4a]">HYDisplayMenu22</a> from dispkeyfunction.o(i.HYDisplayMenu22) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4c]">HYDisplayMenu23</a> from dispkeyfunction.o(i.HYDisplayMenu23) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4e]">HYDisplayMenu24</a> from dispkeyfunction.o(i.HYDisplayMenu24) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[1e]">HYDisplayMenu25</a> from dispkeyfunction.o(i.HYDisplayMenu25) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[50]">HYDisplayMenu26</a> from dispkeyfunction.o(i.HYDisplayMenu26) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[52]">HYDisplayMenu27</a> from dispkeyfunction.o(i.HYDisplayMenu27) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[54]">HYDisplayMenu28</a> from dispkeyfunction.o(i.HYDisplayMenu28) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[24]">HYDisplayMenu3</a> from dispkeyfunction.o(i.HYDisplayMenu3) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[56]">HYDisplayMenu30</a> from dispkeyfunction.o(i.HYDisplayMenu30) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[58]">HYDisplayMenu31</a> from dispkeyfunction.o(i.HYDisplayMenu31) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[5a]">HYDisplayMenu32</a> from dispkeyfunction.o(i.HYDisplayMenu32) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[5c]">HYDisplayMenu33</a> from dispkeyfunction.o(i.HYDisplayMenu33) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[5e]">HYDisplayMenu34</a> from dispkeyfunction.o(i.HYDisplayMenu34) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[60]">HYDisplayMenu35</a> from dispkeyfunction.o(i.HYDisplayMenu35) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[62]">HYDisplayMenu36</a> from dispkeyfunction.o(i.HYDisplayMenu36) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[64]">HYDisplayMenu37</a> from dispkeyfunction.o(i.HYDisplayMenu37) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[26]">HYDisplayMenu4</a> from dispkeyfunction.o(i.HYDisplayMenu4) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[28]">HYDisplayMenu5</a> from dispkeyfunction.o(i.HYDisplayMenu5) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2a]">HYDisplayMenu6</a> from dispkeyfunction.o(i.HYDisplayMenu6) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2c]">HYDisplayMenu7</a> from dispkeyfunction.o(i.HYDisplayMenu7) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2e]">HYDisplayMenu8</a> from dispkeyfunction.o(i.HYDisplayMenu8) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[30]">HYDisplayMenu9</a> from dispkeyfunction.o(i.HYDisplayMenu9) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[1f]">HYKeyEvent1</a> from dispkey.o(i.HYKeyEvent1) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[31]">HYKeyEvent10</a> from dispkey.o(i.HYKeyEvent10) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[33]">HYKeyEvent11</a> from dispkey.o(i.HYKeyEvent11) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[35]">HYKeyEvent12</a> from dispkey.o(i.HYKeyEvent12) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[37]">HYKeyEvent13</a> from dispkey.o(i.HYKeyEvent13) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[39]">HYKeyEvent14</a> from dispkey.o(i.HYKeyEvent14) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3b]">HYKeyEvent15</a> from dispkey.o(i.HYKeyEvent15) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3d]">HYKeyEvent16</a> from dispkey.o(i.HYKeyEvent16) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[3f]">HYKeyEvent17</a> from dispkey.o(i.HYKeyEvent17) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[41]">HYKeyEvent18</a> from dispkey.o(i.HYKeyEvent18) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[43]">HYKeyEvent19</a> from dispkey.o(i.HYKeyEvent19) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[21]">HYKeyEvent2</a> from dispkey.o(i.HYKeyEvent2) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[45]">HYKeyEvent20</a> from dispkey.o(i.HYKeyEvent20) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[47]">HYKeyEvent21</a> from dispkey.o(i.HYKeyEvent21) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[49]">HYKeyEvent22</a> from dispkey.o(i.HYKeyEvent22) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4b]">HYKeyEvent23</a> from dispkey.o(i.HYKeyEvent23) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4d]">HYKeyEvent24</a> from dispkey.o(i.HYKeyEvent24) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[1d]">HYKeyEvent25</a> from dispkey.o(i.HYKeyEvent25) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[4f]">HYKeyEvent26</a> from dispkey.o(i.HYKeyEvent26) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[51]">HYKeyEvent27</a> from dispkey.o(i.HYKeyEvent27) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[53]">HYKeyEvent28</a> from dispkey.o(i.HYKeyEvent28) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[23]">HYKeyEvent3</a> from dispkey.o(i.HYKeyEvent3) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[55]">HYKeyEvent30</a> from dispkey.o(i.HYKeyEvent30) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[57]">HYKeyEvent31</a> from dispkey.o(i.HYKeyEvent31) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[59]">HYKeyEvent32</a> from dispkey.o(i.HYKeyEvent32) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[5b]">HYKeyEvent33</a> from dispkey.o(i.HYKeyEvent33) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[5d]">HYKeyEvent34</a> from dispkey.o(i.HYKeyEvent34) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[5f]">HYKeyEvent35</a> from dispkey.o(i.HYKeyEvent35) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[61]">HYKeyEvent36</a> from dispkey.o(i.HYKeyEvent36) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[63]">HYKeyEvent37</a> from dispkey.o(i.HYKeyEvent37) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[25]">HYKeyEvent4</a> from dispkey.o(i.HYKeyEvent4) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[27]">HYKeyEvent5</a> from dispkey.o(i.HYKeyEvent5) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[29]">HYKeyEvent6</a> from dispkey.o(i.HYKeyEvent6) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2b]">HYKeyEvent7</a> from dispkey.o(i.HYKeyEvent7) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2d]">HYKeyEvent8</a> from dispkey.o(i.HYKeyEvent8) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[2f]">HYKeyEvent9</a> from dispkey.o(i.HYKeyEvent9) referenced 2 times from menudisp .o(.data)
 <LI><a href="#[16]">HY_RecvCardStart</a> from hyframe.o(i.HY_RecvCardStart) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[12]">HY_RecvDevFailAck</a> from hyframe.o(i.HY_RecvDevFailAck) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[e]">HY_RecvDevInfoAck</a> from hyframe.o(i.HY_RecvDevInfoAck) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[11]">HY_RecvDevStopAck</a> from hyframe.o(i.HY_RecvDevStopAck) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[d]">HY_RecvHearAck</a> from hyframe.o(i.HY_RecvHearAck) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[14]">HY_RecvQueryBill</a> from hyframe.o(i.HY_RecvQueryBill) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[15]">HY_RecvQueryRate</a> from hyframe.o(i.HY_RecvQueryRate) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[13]">HY_RecvRateSet</a> from hyframe.o(i.HY_RecvRateSet) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[10]">HY_RecvRecordAck</a> from hyframe.o(i.HY_RecvRecordAck) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[f]">HY_RecvRegisterAck</a> from hyframe.o(i.HY_RecvRegisterAck) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[b]">HY_RecvStartCharge</a> from hyframe.o(i.HY_RecvStartCharge) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[c]">HY_RecvStopCharge</a> from hyframe.o(i.HY_RecvStopCharge) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[17]">HY_RecvUpdata</a> from hyframe.o(i.HY_RecvUpdata) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[a]">HY_SendDevStateA</a> from hyframe.o(i.HY_SendDevStateA) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[9]">HY_SendHear</a> from hyframe.o(i.HY_SendHear) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[8]">HY_SendRegister</a> from hyframe.o(i.HY_SendRegister) referenced 2 times from hyframe.o(.data)
 <LI><a href="#[6d]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[95]">I2C1_ERR_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[94]">I2C1_EVT_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[97]">I2C2_ERR_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[96]">I2C2_EVT_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[b3]">I2C3_ERR_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[b2]">I2C3_EVT_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[6e]">MemManage_Handler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[137]">Munu12_CodeDispose</a> from dwin_com_pro.o(i.Munu12_CodeDispose) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[138]">Munu13_DevnumDispose</a> from dwin_com_pro.o(i.Munu13_DevnumDispose) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[13a]">Munu13_IP1Sert</a> from dwin_com_pro.o(i.Munu13_IP1Sert) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[13b]">Munu13_IP2Sert</a> from dwin_com_pro.o(i.Munu13_IP2Sert) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[13c]">Munu13_IP3Sert</a> from dwin_com_pro.o(i.Munu13_IP3Sert) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[13d]">Munu13_IP4Sert</a> from dwin_com_pro.o(i.Munu13_IP4Sert) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[139]">Munu13_PortSert</a> from dwin_com_pro.o(i.Munu13_PortSert) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[6c]">NMI_Handler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[76]">PVM_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[73]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[9e]">RTCAlarm_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[78]">RTC_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[10c]">Recv_AT_CGDCONT_Ack</a> from modulea7680c.o(i.Recv_AT_CGDCONT_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[10b]">Recv_AT_CIMI_Ack</a> from modulea7680c.o(i.Recv_AT_CIMI_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[10d]">Recv_AT_CIPMODE_Ack</a> from modulea7680c.o(i.Recv_AT_CIPMODE_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[10a]">Recv_AT_CSQ_Ack</a> from modulea7680c.o(i.Recv_AT_CSQ_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[10f]">Recv_AT_ConnectServer0Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_ConnectServer0Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[111]">Recv_AT_ConnectServer0_Ack</a> from modulea7680c.o(i.Recv_AT_ConnectServer0_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[110]">Recv_AT_ConnectServer1Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_ConnectServer1Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[112]">Recv_AT_ConnectServer1_Ack</a> from modulea7680c.o(i.Recv_AT_ConnectServer1_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[113]">Recv_AT_EnterATCmd_Ack</a> from modulea7680c.o(i.Recv_AT_EnterATCmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[10e]">Recv_AT_NETOPEN_Ack</a> from modulea7680c.o(i.Recv_AT_NETOPEN_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[116]">Recv_AT_ReRecv0Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_ReRecv0Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[117]">Recv_AT_ReRecv1Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_ReRecv1Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[114]">Recv_AT_SendAck0Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_SendAck0Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[115]">Recv_AT_SendAck1Cmd_Ack</a> from modulea7680c.o(i.Recv_AT_SendAck1Cmd_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[118]">Recv_AT_SetReAct_Ack</a> from modulea7680c.o(i.Recv_AT_SetReAct_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[119]">Recv_ActRecv0_Ack</a> from modulea7680c.o(i.Recv_ActRecv0_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[11a]">Recv_ActRecv1_Ack</a> from modulea7680c.o(i.Recv_ActRecv1_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[11c]">Recv_HttpConect_Ack</a> from modulea7680c.o(i.Recv_HttpConect_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[11d]">Recv_HttpGet_Ack</a> from modulea7680c.o(i.Recv_HttpGet_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[11b]">Recv_HttpStart_Ack</a> from modulea7680c.o(i.Recv_HttpStart_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[11f]">Recv_ReadData_Ack</a> from modulea7680c.o(i.Recv_ReadData_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[11e]">Recv_ReadDone_Ack</a> from modulea7680c.o(i.Recv_ReadDone_Ack) referenced from modulea7680c.o(.constdata)
 <LI><a href="#[6b]">Reset_Handler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[a6]">SDIO1_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[b1]">SDIO2_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[98]">SPI1_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[99]">SPI2_I2S2EXT_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[a8]">SPI3_I2S3EXT_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[b4]">SPI4_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[71]">SVC_Handler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[74]">SysTick_Handler</a> from drv_common.o(i.SysTick_Handler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[c2]">SystemInit</a> from system_at32f403a_407.o(i.SystemInit) referenced from startup_at32f403a_407.o(.text)
 <LI><a href="#[77]">TAMPER_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[8d]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[90]">TMR1_CH_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[8e]">TMR1_OVF_TMR10_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[8f]">TMR1_TRG_HALL_TMR11_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[91]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[92]">TMR3_GLOBAL_IRQHandler</a> from drv_hwtimer.o(i.TMR3_GLOBAL_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[93]">TMR4_GLOBAL_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[a7]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[ab]">TMR6_GLOBAL_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[ac]">TMR7_GLOBAL_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[a0]">TMR8_BRK_TMR12_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[a3]">TMR8_CH_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[a1]">TMR8_OVF_TMR13_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[a2]">TMR8_TRG_HALL_TMR14_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[c9]">Task4GMain</a> from 4gmain.o(i.Task4GMain) referenced from 4gmain.o(i._4G_main_init)
 <LI><a href="#[ca]">Task4GRecv</a> from 4grecv.o(i.Task4GRecv) referenced from 4grecv.o(i._4G_recv_init)
 <LI><a href="#[cb]">Task4GSend</a> from 4gsend.o(i.Task4GSend) referenced from 4gsend.o(i._4G_send_init)
 <LI><a href="#[143]">Time_charging</a> from dwin_com_pro.o(i.Time_charging) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[144]">Timing_charging</a> from dwin_com_pro.o(i.Timing_charging) referenced from dwin_com_pro.o(.constdata)
 <LI><a href="#[a9]">UART4_IRQHandler</a> from drv_usart.o(i.UART4_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[aa]">UART5_IRQHandler</a> from drv_usart.o(i.UART5_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[be]">UART7_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[bf]">UART8_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[9a]">USART1_IRQHandler</a> from drv_usart.o(i.USART1_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[9b]">USART2_IRQHandler</a> from drv_usart.o(i.USART2_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[9c]">USART3_IRQHandler</a> from drv_usart.o(i.USART3_IRQHandler) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[bd]">USART6_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[9f]">USBFSWakeUp_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[88]">USBFS_H_CAN1_TX_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[89]">USBFS_L_CAN1_RX0_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[ba]">USBFS_MAPH_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[bb]">USBFS_MAPL_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[70]">UsageFault_Handler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[75]">WWDT_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[a5]">XMC_IRQHandler</a> from startup_at32f403a_407.o(.text) referenced from startup_at32f403a_407.o(RESET)
 <LI><a href="#[154]">_4G_main_init</a> from 4gmain.o(i._4G_main_init) referenced from 4gmain.o(.rti_fn.6)
 <LI><a href="#[153]">_4G_recv_init</a> from 4grecv.o(i._4G_recv_init) referenced from 4grecv.o(.rti_fn.6)
 <LI><a href="#[155]">_4G_send_init</a> from 4gsend.o(i._4G_send_init) referenced from 4gsend.o(.rti_fn.6)
 <LI><a href="#[176]">__main</a> from __main.o(!!!main) referenced from startup_at32f403a_407.o(.text)
 <LI><a href="#[ea]">_adc_control</a> from adc.o(i._adc_control) referenced from adc.o(i.rt_hw_adc_register)
 <LI><a href="#[e9]">_adc_read</a> from adc.o(i._adc_read) referenced from adc.o(i.rt_hw_adc_register)
 <LI><a href="#[c5]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[e5]">_pin_control</a> from pin.o(i._pin_control) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[e3]">_pin_read</a> from pin.o(i._pin_read) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[e4]">_pin_write</a> from pin.o(i._pin_write) referenced from pin.o(i.rt_device_pin_register)
 <LI><a href="#[c6]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[e8]">_pwm_control</a> from rt_drv_pwm.o(i._pwm_control) referenced from rt_drv_pwm.o(i.rt_device_pwm_register)
 <LI><a href="#[e6]">_pwm_read</a> from rt_drv_pwm.o(i._pwm_read) referenced from rt_drv_pwm.o(i.rt_device_pwm_register)
 <LI><a href="#[e7]">_pwm_write</a> from rt_drv_pwm.o(i._pwm_write) referenced from rt_drv_pwm.o(i.rt_device_pwm_register)
 <LI><a href="#[129]">_rtc_get_secs</a> from drv_rtc.o(i._rtc_get_secs) referenced from drv_rtc.o(.constdata)
 <LI><a href="#[128]">_rtc_init</a> from drv_rtc.o(i._rtc_init) referenced from drv_rtc.o(.constdata)
 <LI><a href="#[12a]">_rtc_set_secs</a> from drv_rtc.o(i._rtc_set_secs) referenced from drv_rtc.o(.constdata)
 <LI><a href="#[c4]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[100]">_spi_bus_device_control</a> from spi_dev.o(i._spi_bus_device_control) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[fe]">_spi_bus_device_read</a> from spi_dev.o(i._spi_bus_device_read) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[ff]">_spi_bus_device_write</a> from spi_dev.o(i._spi_bus_device_write) referenced from spi_dev.o(i.rt_spi_bus_device_init)
 <LI><a href="#[103]">_spidev_device_control</a> from spi_dev.o(i._spidev_device_control) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[101]">_spidev_device_read</a> from spi_dev.o(i._spidev_device_read) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[102]">_spidev_device_write</a> from spi_dev.o(i._spidev_device_write) referenced from spi_dev.o(i.rt_spidev_device_init)
 <LI><a href="#[cc]">_thread_exit</a> from thread.o(i._thread_exit) referenced from thread.o(i._thread_init)
 <LI><a href="#[cd]">_thread_timeout</a> from thread.o(i._thread_timeout) referenced from thread.o(i._thread_init)
 <LI><a href="#[104]">_timer_thread_entry</a> from timer.o(i._timer_thread_entry) referenced from timer.o(i.rt_system_timer_thread_init)
 <LI><a href="#[15e]">adc</a> from adc.o(i.adc) referenced from adc.o(FSymTab)
 <LI><a href="#[15c]">agile_led_init</a> from agile_led.o(i.agile_led_init) referenced from agile_led.o(.rti_fn.6)
 <LI><a href="#[126]">at32_adc_enabled</a> from drv_adc.o(i.at32_adc_enabled) referenced from drv_adc.o(.constdata)
 <LI><a href="#[12e]">at32_configure</a> from drv_usart.o(i.at32_configure) referenced from drv_usart.o(.constdata)
 <LI><a href="#[12f]">at32_control</a> from drv_usart.o(i.at32_control) referenced from drv_usart.o(.constdata)
 <LI><a href="#[127]">at32_get_adc_value</a> from drv_adc.o(i.at32_get_adc_value) referenced from drv_adc.o(.constdata)
 <LI><a href="#[131]">at32_getc</a> from drv_usart.o(i.at32_getc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[123]">at32_pin_attach_irq</a> from drv_gpio.o(i.at32_pin_attach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[124]">at32_pin_dettach_irq</a> from drv_gpio.o(i.at32_pin_dettach_irq) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[125]">at32_pin_irq_enable</a> from drv_gpio.o(i.at32_pin_irq_enable) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[120]">at32_pin_mode</a> from drv_gpio.o(i.at32_pin_mode) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[122]">at32_pin_read</a> from drv_gpio.o(i.at32_pin_read) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[121]">at32_pin_write</a> from drv_gpio.o(i.at32_pin_write) referenced from drv_gpio.o(.constdata)
 <LI><a href="#[130]">at32_putc</a> from drv_usart.o(i.at32_putc) referenced from drv_usart.o(.constdata)
 <LI><a href="#[135]">at32_timer_counter_get</a> from drv_hwtimer.o(i.at32_timer_counter_get) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[136]">at32_timer_ctrl</a> from drv_hwtimer.o(i.at32_timer_ctrl) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[132]">at32_timer_init</a> from drv_hwtimer.o(i.at32_timer_init) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[133]">at32_timer_start</a> from drv_hwtimer.o(i.at32_timer_start) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[134]">at32_timer_stop</a> from drv_hwtimer.o(i.at32_timer_stop) referenced from drv_hwtimer.o(.constdata)
 <LI><a href="#[cf]">ch_thread_entry</a> from chtask.o(i.ch_thread_entry) referenced from chtask.o(i.ch_thread_init)
 <LI><a href="#[156]">ch_thread_init</a> from chtask.o(i.ch_thread_init) referenced from chtask.o(.rti_fn.6)
 <LI><a href="#[16a]">clear</a> from cmd.o(i.clear) referenced from cmd.o(FSymTab)
 <LI><a href="#[169]">cmd_free</a> from msh.o(i.cmd_free) referenced from msh.o(FSymTab)
 <LI><a href="#[168]">cmd_ps</a> from msh.o(i.cmd_ps) referenced from msh.o(FSymTab)
 <LI><a href="#[1a]">configure</a> from drv_spi.o(i.configure) referenced 2 times from drv_spi.o(.data)
 <LI><a href="#[163]">date</a> from rtc.o(i.date) referenced from rtc.o(FSymTab)
 <LI><a href="#[19]">dlt645_hw_read</a> from dlt645_port.o(i.dlt645_hw_read) referenced 2 times from dlt645_port.o(.data)
 <LI><a href="#[18]">dlt645_hw_write</a> from dlt645_port.o(i.dlt645_hw_write) referenced 2 times from dlt645_port.o(.data)
 <LI><a href="#[157]">dlt645_port_init</a> from dlt645_port.o(i.dlt645_port_init) referenced from dlt645_port.o(.rti_fn.6)
 <LI><a href="#[1c]">drv_pwm_control</a> from drv_pwm.o(i.drv_pwm_control) referenced 2 times from drv_pwm.o(.data)
 <LI><a href="#[158]">dwin_com_init</a> from dwin_com_pro.o(i.dwin_com_init) referenced from dwin_com_pro.o(.rti_fn.6)
 <LI><a href="#[66]">dwin_hw_read</a> from dwin_com_pro.o(i.dwin_hw_read) referenced 2 times from dwin_com_pro.o(.data)
 <LI><a href="#[65]">dwin_hw_write</a> from dwin_com_pro.o(i.dwin_hw_write) referenced 2 times from dwin_com_pro.o(.data)
 <LI><a href="#[6a]">erase</a> from fal_flash_sfud_port.o(i.erase) referenced 2 times from fal_flash_sfud_port.o(.data)
 <LI><a href="#[166]">fal</a> from fal_rtt.o(i.fal) referenced from fal_rtt.o(FSymTab)
 <LI><a href="#[12d]">fal_flash_erase</a> from drv_flash.o(i.fal_flash_erase) referenced from drv_flash.o(.constdata)
 <LI><a href="#[12b]">fal_flash_read</a> from drv_flash.o(i.fal_flash_read) referenced from drv_flash.o(.constdata)
 <LI><a href="#[12c]">fal_flash_write</a> from drv_flash.o(i.fal_flash_write) referenced from drv_flash.o(.constdata)
 <LI><a href="#[d5]">finsh_rx_ind</a> from shell.o(i.finsh_rx_ind) referenced from shell.o(i.finsh_set_device)
 <LI><a href="#[159]">finsh_system_init</a> from shell.o(i.finsh_system_init) referenced from shell.o(.rti_fn.6)
 <LI><a href="#[d6]">finsh_thread_entry</a> from shell.o(i.finsh_thread_entry) referenced from shell.o(i.finsh_system_init)
 <LI><a href="#[c7]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[7]">hy_hw_read</a> from 4grecv.o(i.hy_hw_read) referenced 2 times from 4grecv.o(.data)
 <LI><a href="#[6]">hy_hw_write</a> from 4grecv.o(i.hy_hw_write) referenced 2 times from 4grecv.o(.data)
 <LI><a href="#[67]">init</a> from fal_flash_sfud_port.o(i.init) referenced 2 times from fal_flash_sfud_port.o(.data)
 <LI><a href="#[d9]">input_io_period_check</a> from ch_in_io.o(i.input_io_period_check) referenced from ch_in_io.o(i.input_io_init)
 <LI><a href="#[ce]">led_process</a> from agile_led.o(i.led_process) referenced from agile_led.o(i.agile_led_init)
 <LI><a href="#[da]">led_thread_entry</a> from led_thread.o(i.led_thread_entry) referenced from led_thread.o(i.led_thread_init)
 <LI><a href="#[15b]">led_thread_init</a> from led_thread.o(i.led_thread_init) referenced from led_thread.o(.rti_fn.6)
 <LI><a href="#[175]">list_device</a> from cmd.o(i.list_device) referenced from cmd.o(FSymTab)
 <LI><a href="#[16e]">list_event</a> from cmd.o(i.list_event) referenced from cmd.o(FSymTab)
 <LI><a href="#[170]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced from cmd.o(FSymTab)
 <LI><a href="#[172]">list_memheap</a> from cmd.o(i.list_memheap) referenced from cmd.o(FSymTab)
 <LI><a href="#[173]">list_mempool</a> from cmd.o(i.list_mempool) referenced from cmd.o(FSymTab)
 <LI><a href="#[171]">list_msgqueue</a> from cmd.o(i.list_msgqueue) referenced from cmd.o(FSymTab)
 <LI><a href="#[16f]">list_mutex</a> from cmd.o(i.list_mutex) referenced from cmd.o(FSymTab)
 <LI><a href="#[16d]">list_sem</a> from cmd.o(i.list_sem) referenced from cmd.o(FSymTab)
 <LI><a href="#[16c]">list_thread</a> from cmd.o(i.list_thread) referenced from cmd.o(FSymTab)
 <LI><a href="#[174]">list_timer</a> from cmd.o(i.list_timer) referenced from cmd.o(FSymTab)
 <LI><a href="#[dc]">main_thread_entry</a> from components.o(i.main_thread_entry) referenced from components.o(i.rt_application_init)
 <LI><a href="#[167]">msh_help</a> from msh.o(i.msh_help) referenced from msh.o(FSymTab)
 <LI><a href="#[147]">mtd_nor_dev_erase</a> from fal_rtt.o(i.mtd_nor_dev_erase) referenced from fal_rtt.o(.constdata)
 <LI><a href="#[145]">mtd_nor_dev_read</a> from fal_rtt.o(i.mtd_nor_dev_read) referenced from fal_rtt.o(.constdata)
 <LI><a href="#[146]">mtd_nor_dev_write</a> from fal_rtt.o(i.mtd_nor_dev_write) referenced from fal_rtt.o(.constdata)
 <LI><a href="#[140]">passwordmodify</a> from dwin_com_pro.o(i.passwordmodify) referenced 2 times from dwin_com_pro.o(.constdata)
 <LI><a href="#[160]">pwm_disable</a> from rt_drv_pwm.o(i.pwm_disable) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[15f]">pwm_enable</a> from rt_drv_pwm.o(i.pwm_enable) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[162]">pwm_get</a> from rt_drv_pwm.o(i.pwm_get) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[161]">pwm_set</a> from rt_drv_pwm.o(i.pwm_set) referenced from rt_drv_pwm.o(FSymTab)
 <LI><a href="#[68]">read</a> from fal_flash_sfud_port.o(i.read) referenced 2 times from fal_flash_sfud_port.o(.data)
 <LI><a href="#[db]">read_card_task</a> from read_nuid.o(i.read_card_task) referenced from read_nuid.o(i.read_nuid_init)
 <LI><a href="#[15a]">read_nuid_init</a> from read_nuid.o(i.read_nuid_init) referenced from read_nuid.o(.rti_fn.6)
 <LI><a href="#[165]">reboot</a> from drv_common.o(i.reboot) referenced from drv_common.o(FSymTab)
 <LI><a href="#[109]">retry_delay_100us</a> from spi_flash_sfud.o(i.retry_delay_100us) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[d1]">rt_485_sendrecv_entry</a> from dlt645_port.o(i.rt_485_sendrecv_entry) referenced from dlt645_port.o(i.dlt645_port_init)
 <LI><a href="#[d3]">rt_dwin_period_entry</a> from dwin_com_pro.o(i.rt_dwin_period_entry) referenced from dwin_com_pro.o(i.dwin_com_init)
 <LI><a href="#[d2]">rt_dwin_thread_entry</a> from dwin_com_pro.o(i.rt_dwin_thread_entry) referenced from dwin_com_pro.o(i.dwin_com_init)
 <LI><a href="#[14c]">rt_hw_adc_init</a> from drv_adc.o(i.rt_hw_adc_init) referenced from drv_adc.o(.rti_fn.1)
 <LI><a href="#[14f]">rt_hw_hwtimer_init</a> from drv_hwtimer.o(i.rt_hw_hwtimer_init) referenced from drv_hwtimer.o(.rti_fn.1)
 <LI><a href="#[14a]">rt_hw_pin_init</a> from drv_gpio.o(i.rt_hw_pin_init) referenced from drv_gpio.o(.rti_fn.1)
 <LI><a href="#[14e]">rt_hw_pwm_init</a> from drv_pwm.o(i.rt_hw_pwm_init) referenced from drv_pwm.o(.rti_fn.1)
 <LI><a href="#[151]">rt_hw_rtc_init</a> from drv_rtc.o(i.rt_hw_rtc_init) referenced from drv_rtc.o(.rti_fn.3)
 <LI><a href="#[14b]">rt_hw_spi_init</a> from drv_spi.o(i.rt_hw_spi_init) referenced from drv_spi.o(.rti_fn.1)
 <LI><a href="#[152]">rt_hw_spi_rc522_init</a> from mfrc522_rtt_stm32_port.o(i.rt_hw_spi_rc522_init) referenced from mfrc522_rtt_stm32_port.o(.rti_fn.4)
 <LI><a href="#[14d]">rt_hw_wdt_init</a> from drv_wdt.o(i.rt_hw_wdt_init) referenced from drv_wdt.o(.rti_fn.1)
 <LI><a href="#[df]">rt_hwtimer_close</a> from hwtimer.o(i.rt_hwtimer_close) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[e2]">rt_hwtimer_control</a> from hwtimer.o(i.rt_hwtimer_control) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[dd]">rt_hwtimer_init</a> from hwtimer.o(i.rt_hwtimer_init) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[de]">rt_hwtimer_open</a> from hwtimer.o(i.rt_hwtimer_open) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[e0]">rt_hwtimer_read</a> from hwtimer.o(i.rt_hwtimer_read) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[e1]">rt_hwtimer_write</a> from hwtimer.o(i.rt_hwtimer_write) referenced from hwtimer.o(i.rt_device_hwtimer_register)
 <LI><a href="#[ed]">rt_rtc_close</a> from rtc.o(i.rt_rtc_close) referenced from rtc.o(i.rt_hw_rtc_register)
 <LI><a href="#[ee]">rt_rtc_control</a> from rtc.o(i.rt_rtc_control) referenced from rtc.o(i.rt_hw_rtc_register)
 <LI><a href="#[eb]">rt_rtc_init</a> from rtc.o(i.rt_rtc_init) referenced from rtc.o(i.rt_hw_rtc_register)
 <LI><a href="#[ec]">rt_rtc_open</a> from rtc.o(i.rt_rtc_open) referenced from rtc.o(i.rt_hw_rtc_register)
 <LI><a href="#[f1]">rt_serial_close</a> from serial.o(i.rt_serial_close) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[f4]">rt_serial_control</a> from serial.o(i.rt_serial_control) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[ef]">rt_serial_init</a> from serial.o(i.rt_serial_init) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[f0]">rt_serial_open</a> from serial.o(i.rt_serial_open) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[f2]">rt_serial_read</a> from serial.o(i.rt_serial_read) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[f3]">rt_serial_write</a> from serial.o(i.rt_serial_write) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[fd]">rt_sfud_control</a> from spi_flash_sfud.o(i.rt_sfud_control) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[fb]">rt_sfud_read</a> from spi_flash_sfud.o(i.rt_sfud_read) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[fc]">rt_sfud_write</a> from spi_flash_sfud.o(i.rt_sfud_write) referenced from spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
 <LI><a href="#[105]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[f7]">rt_watchdog_close</a> from watchdog.o(i.rt_watchdog_close) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[f8]">rt_watchdog_control</a> from watchdog.o(i.rt_watchdog_control) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[f5]">rt_watchdog_init</a> from watchdog.o(i.rt_watchdog_init) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[f6]">rt_watchdog_open</a> from watchdog.o(i.rt_watchdog_open) referenced from watchdog.o(i.rt_hw_watchdog_register)
 <LI><a href="#[150]">rti_board_end</a> from components.o(i.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[149]">rti_board_start</a> from components.o(i.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[15d]">rti_end</a> from components.o(i.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[148]">rti_start</a> from components.o(i.rti_start) referenced from components.o(.rti_fn.0)
 <LI><a href="#[164]">sf</a> from spi_flash_sfud.o(i.sf) referenced from spi_flash_sfud.o(FSymTab)
 <LI><a href="#[107]">spi_lock</a> from spi_flash_sfud.o(i.spi_lock) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[108]">spi_unlock</a> from spi_flash_sfud.o(i.spi_unlock) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[106]">spi_write_read</a> from spi_flash_sfud.o(i.spi_write_read) referenced from spi_flash_sfud.o(i.sfud_spi_port_init)
 <LI><a href="#[13e]">timeSert</a> from dwin_com_pro.o(i.timeSert) referenced 2 times from dwin_com_pro.o(.constdata)
 <LI><a href="#[d7]">timeout_cb</a> from cp.o(i.timeout_cb) referenced from cp.o(i.hwtimer_sample)
 <LI><a href="#[c8]">timerout</a> from mfrc522.o(i.timerout) referenced from mfrc522.o(i.PCD_Init)
 <LI><a href="#[d0]">uart1_handler</a> from dlt645_port.o(i.uart1_handler) referenced from dlt645_port.o(i.dlt645_port_init)
 <LI><a href="#[d8]">uart2_handler</a> from 4grecv.o(i.uart2_handler) referenced from 4grecv.o(i.hy4g_port_init)
 <LI><a href="#[d4]">uart4_handler</a> from dwin_com_pro.o(i.uart4_handler) referenced from dwin_com_pro.o(i.dwin_port_init)
 <LI><a href="#[16b]">version</a> from cmd.o(i.version) referenced from cmd.o(FSymTab)
 <LI><a href="#[fa]">wdt_control</a> from drv_wdt.o(i.wdt_control) referenced from drv_wdt.o(i.rt_hw_wdt_init)
 <LI><a href="#[f9]">wdt_init</a> from drv_wdt.o(i.wdt_init) referenced from drv_wdt.o(i.rt_hw_wdt_init)
 <LI><a href="#[69]">write</a> from fal_flash_sfud_port.o(i.write) referenced 2 times from fal_flash_sfud_port.o(.data)
 <LI><a href="#[1b]">xfer</a> from drv_spi.o(i.xfer) referenced 2 times from drv_spi.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[176]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[177]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[179]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4bc]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4bd]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4be]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4bf]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[4c0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[17a]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[19e]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[17c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[4c1]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[18a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[17e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[4c2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[180]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[4c3]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[4c4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[4c5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4c6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[182]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[4c7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[4c8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[4c9]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[4ca]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[4cb]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4cc]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[4cd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[4ce]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[4cf]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[183]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[4d0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[4d1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[4d2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[4d3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[4d4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[4d5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[18f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[4d6]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[4d7]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[4d8]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[4d9]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[4da]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[4db]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4dc]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[4dd]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[178]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[4de]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[187]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[189]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[4df]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[18b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4e0]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1ca]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[4e1]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[190]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2f2]"></a>__rt_ffs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cpuport.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>

<P><STRONG><a name="[2dd]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_dettach_irq
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_attach_irq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_control
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
</UL>

<P><STRONG><a name="[2de]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_dettach_irq
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_attach_irq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_control
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
</UL>

<P><STRONG><a name="[45e]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[45f]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[73]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[46e]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[4e2]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>HardFault_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>CAN1_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>CAN2_SE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>EMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>EMAC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>I2C3_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>I2C3_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>SDIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>SDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>SPI2_I2S2EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>SPI3_I2S3EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>TMR1_OVF_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>TMR1_TRG_HALL_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>TMR6_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>TMR8_BRK_TMR12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>TMR8_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>TMR8_OVF_TMR13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>TMR8_TRG_HALL_TMR14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>USBFSWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>USBFS_H_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>USBFS_L_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>USBFS_MAPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>USBFS_MAPL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>XMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403a_407.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_at32f403a_407.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4e3]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4e4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4e5]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>__I$use$heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_cb
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
</UL>

<P><STRONG><a name="[4e7]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvUpdata
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
</UL>

<P><STRONG><a name="[195]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvUpdata
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_READ
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPPAR
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPSEND
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_SYSShowTime
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP4Sert
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP3Sert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP2Sert
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP1Sert
</UL>

<P><STRONG><a name="[199]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[19a]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[198]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[17b]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[19c]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[19f]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpGet_Ack
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[1a1]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1a4]"></a>strtok</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpGet_Ack
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
</UL>

<P><STRONG><a name="[288]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpStart_Ack
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpConect_Ack
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck1Cmd_Ack
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck0Cmd_Ack
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIMI_Ack
</UL>

<P><STRONG><a name="[3c9]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[3d0]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[256]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600_RecvDesposeCmd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_READ
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPPAR
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPSEND
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_data_parse_by_format_to_float
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
</UL>

<P><STRONG><a name="[28d]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600_RecvDesposeCmd
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[3d1]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRegister
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendHear
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvUpdata
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStartCharge
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRecordAck
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvCardStart
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreHYBill
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStopAck
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStartAck
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvFrameDispose
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetHYBatchNum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HY_RestUpdataData
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendUpdataAck
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendQueryRateAck
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Showstop_reason
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_bill
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CardMCUID
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[4e8]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[4e9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[1ad]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvUpdata
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_bill
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[1aa]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1a9]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_msg
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_from_ctl_msg
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_1997_read_data
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_2007_read_data
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_SYSShowTime
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_uart_read
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[4ec]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4ed]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1ac]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusCodeName
</UL>

<P><STRONG><a name="[2fa]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[4ee]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4ef]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[4f1]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[1af]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[19b]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[196]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[197]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>

<P><STRONG><a name="[c4]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[1b0]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1b1]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[17d]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[194]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1a3]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1a5]"></a>__strtok_internal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[4f3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4f4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[1b3]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1b2]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[184]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[186]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[1b5]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[1b4]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[188]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1be]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[3e7]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[4f5]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1b7]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1c7]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1ba]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _fclose_internal &rArr; free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[4f6]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b8]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = __rt_SIGRTRED &rArr; __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1c6]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[4f7]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1c4]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1c8]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[1bf]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1cc]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = __sig_exit &rArr; _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[1cd]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[4f8]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[18c]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1d3]"></a>APPTransactionrecord</STRONG> (Thumb, 534 bytes, Stack size 96 bytes, dwin_com_pro.o(i.APPTransactionrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_GetStartType
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBatchNum
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Showstop_reason
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode5
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_WriterFmBill
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
</UL>

<P><STRONG><a name="[1dc]"></a>APP_ClearRecodeInfo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dwin_com_pro.o(i.APP_ClearRecodeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = APP_ClearRecodeInfo &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[1dd]"></a>APP_DisplayRecvDataAnalyze</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, dwin_com_pro.o(i.APP_DisplayRecvDataAnalyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = APP_DisplayRecvDataAnalyze &rArr; DealWithVari
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithVari
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithKey
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
</UL>

<P><STRONG><a name="[200]"></a>APP_GetAppRegisterState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_GetAppRegisterState))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRegister
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendHear
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[1d5]"></a>APP_GetBatchNum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, 4gmain.o(i.APP_GetBatchNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_GetBatchNum &rArr; APP_GetHYBatchNum
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetHYBatchNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>

<P><STRONG><a name="[29a]"></a>APP_GetBillInfo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dwin_com_pro.o(i.APP_GetBillInfo))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HY_RestUpdataData
</UL>

<P><STRONG><a name="[202]"></a>APP_GetCSQNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_GetCSQNum))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
</UL>

<P><STRONG><a name="[1e1]"></a>APP_GetHYBatchNum</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hyframe.o(i.APP_GetHYBatchNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_GetHYBatchNum
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBatchNum
</UL>

<P><STRONG><a name="[2bc]"></a>APP_GetHYStartType</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hyframe.o(i.APP_GetHYStartType))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_GetStartType
</UL>

<P><STRONG><a name="[1f7]"></a>APP_GetModuleConnectState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_GetModuleConnectState))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
</UL>

<P><STRONG><a name="[2ad]"></a>APP_GetResendBillState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, 4gmain.o(i.APP_GetResendBillState))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[295]"></a>APP_GetSIM7600Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_GetSIM7600Mode))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_entry
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_485_sendrecv_entry
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_period_entry
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[1f4]"></a>APP_GetSIM7600Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_GetSIM7600Status))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[258]"></a>APP_RecvDataControl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, 4grecv.o(i.APP_RecvDataControl))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpGet_Ack
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
</UL>

<P><STRONG><a name="[1e2]"></a>APP_SelectCurChargeRecode</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, dwin_com_pro.o(i.APP_SelectCurChargeRecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = APP_SelectCurChargeRecode &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[1e6]"></a>APP_SelectNextNChargeRecode</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, dwin_com_pro.o(i.APP_SelectNextNChargeRecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = APP_SelectNextNChargeRecode &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent30
</UL>

<P><STRONG><a name="[1e7]"></a>APP_SelectUpNChargeRecode</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, dwin_com_pro.o(i.APP_SelectUpNChargeRecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = APP_SelectUpNChargeRecode &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent31
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent30
</UL>

<P><STRONG><a name="[231]"></a>APP_SetAppRegisterState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_SetAppRegisterState))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
</UL>

<P><STRONG><a name="[2be]"></a>APP_SetHYStartType</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hyframe.o(i.APP_SetHYStartType))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SetStartType
</UL>

<P><STRONG><a name="[254]"></a>APP_SetNetNotConect</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_SetNetNotConect))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
</UL>

<P><STRONG><a name="[285]"></a>APP_SetResendBillState</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, 4gmain.o(i.APP_SetResendBillState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_SetResendBillState
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFmBill
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
</UL>

<P><STRONG><a name="[22e]"></a>APP_SetSIM7600Mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modulea7680c.o(i.APP_SetSIM7600Mode))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvHearAck
</UL>

<P><STRONG><a name="[236]"></a>APP_SetStartNetState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, 4gmain.o(i.APP_SetStartNetState))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStartCharge
</UL>

<P><STRONG><a name="[1e8]"></a>Ad_entry</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dispkey.o(i.Ad_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ad_entry
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent25
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent2
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[1ea]"></a>Auto_charging</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dwin_com_pro.o(i.Auto_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Auto_charging &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
</UL>

<P><STRONG><a name="[233]"></a>BCDtoHEX</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dwinprotocol.o(i.BCDtoHEX))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
</UL>

<P><STRONG><a name="[1eb]"></a>BubbleSort</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cp.o(i.BubbleSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swap
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
</UL>

<P><STRONG><a name="[1ed]"></a>Clear_flag</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, read_nuid.o(i.Clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clear_flag &rArr; ch_is_cp_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_cp_off
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[1ef]"></a>Clear_record</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dwin_com_pro.o(i.Clear_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Clear_record &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
</UL>

<P><STRONG><a name="[1df]"></a>DealWithKey</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dispkey.o(i.DealWithKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DealWithKey
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
</UL>

<P><STRONG><a name="[1fa]"></a>Dis_SYSShowTime</STRONG> (Thumb, 98 bytes, Stack size 168 bytes, dwin_com_pro.o(i.Dis_SYSShowTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = Dis_SYSShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Showsettime
</UL>

<P><STRONG><a name="[1d4]"></a>Dis_ShowCopy</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dispshowstatus.o(i.Dis_ShowCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dis_ShowCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlementrecord
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_bill
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[1fc]"></a>Dis_ShowStatus</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dispshowstatus.o(i.Dis_ShowStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>

<P><STRONG><a name="[1fd]"></a>Dis_ShowTime</STRONG> (Thumb, 110 bytes, Stack size 168 bytes, dwin_com_pro.o(i.Dis_ShowTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShowRTC
</UL>

<P><STRONG><a name="[1d7]"></a>Dis_Showstop_reason</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dispshowstatus.o(i.Dis_Showstop_reason))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dis_Showstop_reason
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>

<P><STRONG><a name="[204]"></a>Disp_Showsettime</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Disp_Showsettime))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = Disp_Showsettime &rArr; Dis_SYSShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_SYSShowTime
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu12_CodeDispose
</UL>

<P><STRONG><a name="[1e3]"></a>DisplayCommonMenu</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dispkeyfunction.o(i.DisplayCommonMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBackImage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent9
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent8
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent7
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent6
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent5
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent25
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent24
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent23
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent21
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent20
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent2
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent19
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent18
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent17
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent15
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent11
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent10
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timing_charging
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_charging
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu12_CodeDispose
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Electric_charing
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Amount_charging
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_charging
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[206]"></a>DisplayQRCode</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dwinprotocol.o(i.DisplayQRCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = DisplayQRCode &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
</UL>

<P><STRONG><a name="[7b]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT0_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>EXINT15_10_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT15_10_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_get
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT1_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT2_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT3_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>EXINT4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT4_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>EXINT9_5_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, drv_gpio.o(i.EXINT9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXINT9_5_IRQHandler &rArr; gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_get
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[1de]"></a>GetCurMenu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dispkeyfunction.o(i.GetCurMenu))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_Showstop_reason
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_SYSShowTime
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithKey
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[20f]"></a>GetStatusCodeName</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, mfrc522.o(i.GetStatusCodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetStatusCodeName &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_card_money
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CardMCUID
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
</UL>

<P><STRONG><a name="[239]"></a>HEXtoBCD</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dwinprotocol.o(i.HEXtoBCD))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreHYBill
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
</UL>

<P><STRONG><a name="[210]"></a>HLW8112DataDispose</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, chtask.o(i.HLW8112DataDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = HLW8112DataDispose &rArr; Init_HLW8112 &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8209
</UL>

<P><STRONG><a name="[212]"></a>HLW8112_CS_DIS</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rn8209.o(i.HLW8112_CS_DIS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HLW8112_CS_DIS &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
</UL>

<P><STRONG><a name="[215]"></a>HLW8112_CS_EN</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rn8209.o(i.HLW8112_CS_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HLW8112_CS_EN &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
</UL>

<P><STRONG><a name="[216]"></a>HLW8112_Measure</STRONG> (Thumb, 514 bytes, Stack size 24 bytes, rn8209.o(i.HLW8112_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = HLW8112_Measure &rArr; Init_HLW8112 &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_U
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_PA_I
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8209
</UL>

<P><STRONG><a name="[21e]"></a>HLW8112_SPI_ReadByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rn8209.o(i.HLW8112_SPI_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HLW8112_SPI_ReadByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
</UL>

<P><STRONG><a name="[220]"></a>HLW8112_SPI_ReadReg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rn8209.o(i.HLW8112_SPI_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
</UL>

<P><STRONG><a name="[221]"></a>HLW8112_SPI_WriteByte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rn8209.o(i.HLW8112_SPI_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteReg
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_ReadReg
</UL>

<P><STRONG><a name="[222]"></a>HLW8112_SPI_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rn8209.o(i.HLW8112_SPI_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HLW8112_SPI_WriteReg &rArr; HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>

<P><STRONG><a name="[223]"></a>HLW8112_WriteREG_DIS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rn8209.o(i.HLW8112_WriteREG_DIS))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HLW8112_WriteREG_DIS &rArr; HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_EN
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>

<P><STRONG><a name="[224]"></a>HLW8112_WriteREG_EN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rn8209.o(i.HLW8112_WriteREG_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HLW8112_WriteREG_EN &rArr; HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_EN
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>

<P><STRONG><a name="[20]"></a>HYDisplayMenu1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu1))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[32]"></a>HYDisplayMenu10</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu10))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[34]"></a>HYDisplayMenu11</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu11))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[36]"></a>HYDisplayMenu12</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu12))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[38]"></a>HYDisplayMenu13</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu13))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>HYDisplayMenu14</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu14))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>HYDisplayMenu15</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu15))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>HYDisplayMenu16</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu16))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[40]"></a>HYDisplayMenu17</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu17))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[42]"></a>HYDisplayMenu18</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu18))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[44]"></a>HYDisplayMenu19</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu19))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[22]"></a>HYDisplayMenu2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu2))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[46]"></a>HYDisplayMenu20</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu20))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[48]"></a>HYDisplayMenu21</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu21))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>HYDisplayMenu22</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu22))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>HYDisplayMenu23</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu23))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>HYDisplayMenu24</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu24))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>HYDisplayMenu25</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu25))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[50]"></a>HYDisplayMenu26</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu26))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[52]"></a>HYDisplayMenu27</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu27))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[54]"></a>HYDisplayMenu28</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu28))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[24]"></a>HYDisplayMenu3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu3))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[56]"></a>HYDisplayMenu30</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu30))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[58]"></a>HYDisplayMenu31</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu31))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>HYDisplayMenu32</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu32))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>HYDisplayMenu33</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu33))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>HYDisplayMenu34</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu34))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[60]"></a>HYDisplayMenu35</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu35))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[62]"></a>HYDisplayMenu36</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu36))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[64]"></a>HYDisplayMenu37</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu37))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[26]"></a>HYDisplayMenu4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu4))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[28]"></a>HYDisplayMenu5</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu5))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>HYDisplayMenu6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu6))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>HYDisplayMenu7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu7))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>HYDisplayMenu8</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu8))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[30]"></a>HYDisplayMenu9</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu9))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[225]"></a>HYFreamSend</STRONG> (Thumb, 230 bytes, Stack size 528 bytes, hyframe.o(i.HYFreamSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc_Data
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRegister
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendHear
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStopAck
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStartAck
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRateAck
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBillData
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendUpdataAck
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendQueryRateAck
</UL>

<P><STRONG><a name="[1f]"></a>HYKeyEvent1</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent1))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = HYKeyEvent1 &rArr; Munu27_ShowSysInfo &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[31]"></a>HYKeyEvent10</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent10))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent10 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[33]"></a>HYKeyEvent11</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent11))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent11 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[35]"></a>HYKeyEvent12</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent12))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[37]"></a>HYKeyEvent13</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent13))
<BR><BR>[Stack]<UL><LI>Max Depth = 852 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent13 &rArr; Munu27_ShowSysInfo &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Showsettime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[39]"></a>HYKeyEvent14</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent14))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = HYKeyEvent14 &rArr; Munu13_ShowSysInfo &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_record
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>HYKeyEvent15</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent15))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent15 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>HYKeyEvent16</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent16))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = HYKeyEvent16 &rArr; Auto_charging &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_charging
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>HYKeyEvent17</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent17))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent17 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[41]"></a>HYKeyEvent18</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent18))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent18 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[43]"></a>HYKeyEvent19</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent19))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent19 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[21]"></a>HYKeyEvent2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent2))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent2 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[45]"></a>HYKeyEvent20</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent20))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent20 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[47]"></a>HYKeyEvent21</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent21))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent21 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[49]"></a>HYKeyEvent22</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent22))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = HYKeyEvent22 &rArr; ReadDwinVariable &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>HYKeyEvent23</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent23))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent23 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>HYKeyEvent24</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent24))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent24 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>HYKeyEvent25</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent25))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent25 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>HYKeyEvent26</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent26))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[51]"></a>HYKeyEvent27</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent27))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = HYKeyEvent27 &rArr; Munu27_ShowSysInfo &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[53]"></a>HYKeyEvent28</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent28))
<BR><BR>[Stack]<UL><LI>Max Depth = 852<LI>Call Chain = HYKeyEvent28 &rArr; Munu27_ShowSysInfo &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[23]"></a>HYKeyEvent3</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent3))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent3 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[55]"></a>HYKeyEvent30</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent30))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = HYKeyEvent30 &rArr; APP_SelectUpNChargeRecode &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[57]"></a>HYKeyEvent31</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent31))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = HYKeyEvent31 &rArr; APP_SelectUpNChargeRecode &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[59]"></a>HYKeyEvent32</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent32))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>HYKeyEvent33</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent33))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>HYKeyEvent34</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent34))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>HYKeyEvent35</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent35))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[61]"></a>HYKeyEvent36</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent36))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[63]"></a>HYKeyEvent37</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent37))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[25]"></a>HYKeyEvent4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent4))
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[27]"></a>HYKeyEvent5</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent5))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent5 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[29]"></a>HYKeyEvent6</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent6))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent6 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>HYKeyEvent7</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent7))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent7 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>HYKeyEvent8</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent8))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent8 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>HYKeyEvent9</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent9))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HYKeyEvent9 &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp .o(.data)
</UL>
<P><STRONG><a name="[22d]"></a>HY_RecvFrameDispose</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, hyframe.o(i.HY_RecvFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HY_RecvFrameDispose &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_RecvFrameDispose
</UL>

<P><STRONG><a name="[238]"></a>HY_SendBill</STRONG> (Thumb, 800 bytes, Stack size 16 bytes, hyframe.o(i.HY_SendBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + Unknown Stack Size
<LI>Call Chain = HY_SendBill &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoBCD
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendBill
</UL>

<P><STRONG><a name="[23a]"></a>HY_SendBillData</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, hyframe.o(i.HY_SendBillData))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = HY_SendBillData &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSendBill
</UL>

<P><STRONG><a name="[23b]"></a>HY_SendCardInfo</STRONG> (Thumb, 478 bytes, Stack size 216 bytes, hyframe.o(i.HY_SendCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1164 + Unknown Stack Size
<LI>Call Chain = HY_SendCardInfo &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendCardInfo
</UL>

<P><STRONG><a name="[a]"></a>HY_SendDevStateA</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, hyframe.o(i.HY_SendDevStateA))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = HY_SendDevStateA &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendDevState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[2bd]"></a>HY_SendDevStateB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hyframe.o(i.HY_SendDevStateB))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendDevState
</UL>

<P><STRONG><a name="[23d]"></a>HY_SendFrameDispose</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, hyframe.o(i.HY_SendFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HY_SendFrameDispose
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendFrameDispose
</UL>

<P><STRONG><a name="[23e]"></a>HY_SendQueryRateAck</STRONG> (Thumb, 70 bytes, Stack size 112 bytes, hyframe.o(i.HY_SendQueryRateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060 + Unknown Stack Size
<LI>Call Chain = HY_SendQueryRateAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[23f]"></a>HY_SendRateAck</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hyframe.o(i.HY_SendRateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = HY_SendRateAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendRateAck
</UL>

<P><STRONG><a name="[240]"></a>HY_SendStartAck</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hyframe.o(i.HY_SendStartAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + Unknown Stack Size
<LI>Call Chain = HY_SendStartAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendStartAck
</UL>

<P><STRONG><a name="[241]"></a>HY_SendStopAck</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hyframe.o(i.HY_SendStopAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + Unknown Stack Size
<LI>Call Chain = HY_SendStopAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendStopAck
</UL>

<P><STRONG><a name="[22f]"></a>HY_SendUpdataAck</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hyframe.o(i.HY_SendUpdataAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + Unknown Stack Size
<LI>Call Chain = HY_SendUpdataAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvHearAck
</UL>

<P><STRONG><a name="[211]"></a>Init_HLW8112</STRONG> (Thumb, 1122 bytes, Stack size 8 bytes, rn8209.o(i.Init_HLW8112))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = Init_HLW8112 &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_us_delay
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_CheckSum_HLW8112_Calfactor
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteReg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_EN
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112DataDispose
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
</UL>

<P><STRONG><a name="[243]"></a>Judge_CheckSum_HLW8112_Calfactor</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, rn8209.o(i.Judge_CheckSum_HLW8112_Calfactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Judge_CheckSum_HLW8112_Calfactor &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>

<P><STRONG><a name="[296]"></a>JumpToProgramCode</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(i.JumpToProgramCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JumpToProgramCode
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
</UL>

<P><STRONG><a name="[248]"></a>MFRC522</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mfrc522.o(i.MFRC522))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = MFRC522 &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[24b]"></a>MIFARE_Read</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, mfrc522.o(i.MIFARE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = MIFARE_Read &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TransceiveData
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
</UL>

<P><STRONG><a name="[24e]"></a>MIFARE_SetValue</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, mfrc522.o(i.MIFARE_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = MIFARE_SetValue &rArr; MIFARE_Write &rArr; PCD_MIFARE_Transceive &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_card_money
</UL>

<P><STRONG><a name="[24f]"></a>MIFARE_Write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mfrc522.o(i.MIFARE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = MIFARE_Write &rArr; PCD_MIFARE_Transceive &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CardMCUID
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_SetValue
</UL>

<P><STRONG><a name="[1f8]"></a>ModuleSIM7600_ConnectServer</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, modulea7680c.o(i.ModuleSIM7600_ConnectServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = ModuleSIM7600_ConnectServer &rArr; Module_ConnectServer &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETOPEN
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[227]"></a>ModuleSIM7600_SendData</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, modulea7680c.o(i.ModuleSIM7600_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetNetNotConect
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPSEND
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
</UL>

<P><STRONG><a name="[257]"></a>Module_HTTPDownload</STRONG> (Thumb, 576 bytes, Stack size 24 bytes, modulea7680c.o(i.Module_HTTPDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = Module_HTTPDownload &rArr; Send_AT_HTTPPAR &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_APPOTA
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_READ
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPTERM
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPPAR
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPINIT
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_GET
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_EnterATCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
</UL>

<P><STRONG><a name="[1f5]"></a>Module_SIM7600Test</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, modulea7680c.o(i.Module_SIM7600Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = Module_SIM7600Test &rArr; Send_AT_CSQ &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CSQ
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPMODE
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_SetCIPRXGET
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NOTCIPMODE
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIMI
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CGDCONT
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[1f2]"></a>Munu13_ShowSysInfo</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, dwin_com_pro.o(i.Munu13_ShowSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = Munu13_ShowSysInfo &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passwordmodify
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_PortSert
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP4Sert
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP3Sert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP2Sert
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP1Sert
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_DevnumDispose
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu12_CodeDispose
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Company_code
</UL>

<P><STRONG><a name="[22a]"></a>Munu27_ShowSysInfo</STRONG> (Thumb, 2128 bytes, Stack size 520 bytes, dwin_com_pro.o(i.Munu27_ShowSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = Munu27_ShowSysInfo &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent28
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent27
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[266]"></a>PCD_AntennaOn</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mfrc522.o(i.PCD_AntennaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = PCD_AntennaOn &rArr; PCD_WriteReg_Byte &rArr; mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadReg_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
</UL>

<P><STRONG><a name="[269]"></a>PCD_Authenticate</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, mfrc522.o(i.PCD_Authenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = PCD_Authenticate &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_card_money
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CardMCUID
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
</UL>

<P><STRONG><a name="[24c]"></a>PCD_CalculateCRC</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, mfrc522.o(i.PCD_CalculateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = PCD_CalculateCRC &rArr; PCD_WriteRegister &rArr; mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadReg_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_HaltA
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Read
</UL>

<P><STRONG><a name="[26c]"></a>PCD_ClearRegisterBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfrc522.o(i.PCD_ClearRegisterBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = PCD_ClearRegisterBitMask &rArr; PCD_WriteReg_Byte &rArr; mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadReg_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_REQA_or_WUPA
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_StopCrypto1
</UL>

<P><STRONG><a name="[26a]"></a>PCD_CommunicateWithPICC</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, mfrc522.o(i.PCD_CommunicateWithPICC))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SetRegisterBitMask
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadReg_Byte
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TransceiveData
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_MIFARE_Transceive
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Authenticate
</UL>

<P><STRONG><a name="[26f]"></a>PCD_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, mfrc522.o(i.PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = PCD_Init &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Reset
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_AntennaOn
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[250]"></a>PCD_MIFARE_Transceive</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, mfrc522.o(i.PCD_MIFARE_Transceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = PCD_MIFARE_Transceive &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Write
</UL>

<P><STRONG><a name="[267]"></a>PCD_ReadReg_Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mfrc522.o(i.PCD_ReadReg_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = PCD_ReadReg_Byte &rArr; mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfrc522_spi_send_no_take_no_release
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfrc522_spi_recv_no_take_no_release
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SetRegisterBitMask
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Reset
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ClearRegisterBitMask
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_AntennaOn
</UL>

<P><STRONG><a name="[26e]"></a>PCD_ReadRegister</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, mfrc522.o(i.PCD_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfrc522_spi_send_then_recv_no_take_no_release
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfrc522_spi_send_no_take_no_release
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfrc522_spi_recv_no_take_no_release
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
</UL>

<P><STRONG><a name="[272]"></a>PCD_Reset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mfrc522.o(i.PCD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = PCD_Reset &rArr; PCD_WriteReg_Byte &rArr; mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadReg_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
</UL>

<P><STRONG><a name="[26d]"></a>PCD_SetRegisterBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mfrc522.o(i.PCD_SetRegisterBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = PCD_SetRegisterBitMask &rArr; PCD_WriteReg_Byte &rArr; mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadReg_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
</UL>

<P><STRONG><a name="[276]"></a>PCD_StopCrypto1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mfrc522.o(i.PCD_StopCrypto1))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = PCD_StopCrypto1 &rArr; PCD_ClearRegisterBitMask &rArr; PCD_WriteReg_Byte &rArr; mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ClearRegisterBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[24d]"></a>PCD_TransceiveData</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, mfrc522.o(i.PCD_TransceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_REQA_or_WUPA
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_HaltA
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Read
</UL>

<P><STRONG><a name="[268]"></a>PCD_WriteReg_Byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mfrc522.o(i.PCD_WriteReg_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = PCD_WriteReg_Byte &rArr; mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfrc522_spi_send_no_take_no_release
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsNewCardPresent
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SetRegisterBitMask
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Reset
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ClearRegisterBitMask
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_AntennaOn
</UL>

<P><STRONG><a name="[26b]"></a>PCD_WriteRegister</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mfrc522.o(i.PCD_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = PCD_WriteRegister &rArr; mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfrc522_spi_send_no_take_no_release
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CommunicateWithPICC
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
</UL>

<P><STRONG><a name="[277]"></a>PICC_HaltA</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mfrc522.o(i.PICC_HaltA))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = PICC_HaltA &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TransceiveData
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[278]"></a>PICC_IsNewCardPresent</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mfrc522.o(i.PICC_IsNewCardPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = PICC_IsNewCardPresent &rArr; PICC_RequestA &rArr; PICC_REQA_or_WUPA &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RequestA
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
</UL>

<P><STRONG><a name="[27a]"></a>PICC_REQA_or_WUPA</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, mfrc522.o(i.PICC_REQA_or_WUPA))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = PICC_REQA_or_WUPA &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TransceiveData
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ClearRegisterBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_RequestA
</UL>

<P><STRONG><a name="[27b]"></a>PICC_ReadCardSerial</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mfrc522.o(i.PICC_ReadCardSerial))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = PICC_ReadCardSerial &rArr; PICC_Select &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
</UL>

<P><STRONG><a name="[279]"></a>PICC_RequestA</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mfrc522.o(i.PICC_RequestA))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = PICC_RequestA &rArr; PICC_REQA_or_WUPA &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_REQA_or_WUPA
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsNewCardPresent
</UL>

<P><STRONG><a name="[27c]"></a>PICC_Select</STRONG> (Thumb, 856 bytes, Stack size 104 bytes, mfrc522.o(i.PICC_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = PICC_Select &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_TransceiveData
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadReg_Byte
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ClearRegisterBitMask
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CalculateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ReadCardSerial
</UL>

<P><STRONG><a name="[27e]"></a>PraPerprintBackImage</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dwinprotocol.o(i.PraPerprintBackImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBackImage
</UL>

<P><STRONG><a name="[27f]"></a>Pre4GBill</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, 4gmain.o(i.Pre4GBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Pre4GBill &rArr; PreHYBill &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreHYBill
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
</UL>

<P><STRONG><a name="[280]"></a>PreHYBill</STRONG> (Thumb, 626 bytes, Stack size 24 bytes, hyframe.o(i.PreHYBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = PreHYBill &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoBCD
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre4GBill
</UL>

<P><STRONG><a name="[205]"></a>PrintBackImage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dwinprotocol.o(i.PrintBackImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>

<P><STRONG><a name="[201]"></a>PrintIcon</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dwinprotocol.o(i.PrintIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = PrintIcon &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>

<P><STRONG><a name="[1e5]"></a>PrintNum16uVariable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dwinprotocol.o(i.PrintNum16uVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = PrintNum16uVariable &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent20
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent19
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent18
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent17
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu27_ShowSysInfo
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
</UL>

<P><STRONG><a name="[281]"></a>PrintNum32uVariable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dwinprotocol.o(i.PrintNum32uVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = PrintNum32uVariable &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendFourBytes
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[1fb]"></a>PrintStr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dwinprotocol.o(i.PrintStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_SYSShowTime
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_bill
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_DevnumDispose
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>

<P><STRONG><a name="[282]"></a>Rc522_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, mfrc522.o(i.Rc522_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = Rc522_Init &rArr; PCD_Reset &rArr; PCD_WriteReg_Byte &rArr; mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Reset
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_AntennaOn
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
</UL>

<P><STRONG><a name="[283]"></a>ReSendBill</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, 4gmain.o(i.ReSendBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 988 + Unknown Stack Size
<LI>Call Chain = ReSendBill &rArr; HY_SendBillData &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBillData
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[22b]"></a>ReadDwinVariable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dwinprotocol.o(i.ReadDwinVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ReadDwinVariable &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent22
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent20
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent19
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent18
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent17
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
</UL>

<P><STRONG><a name="[232]"></a>ReadFmBill</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, dwin_com_pro.o(i.ReadFmBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ReadFmBill &rArr; fal_partition_read &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetResendBillState
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
</UL>

<P><STRONG><a name="[21d]"></a>Read_HLW8112_EA</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, rn8209.o(i.Read_HLW8112_EA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read_HLW8112_EA &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteReg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_EN
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
</UL>

<P><STRONG><a name="[218]"></a>Read_HLW8112_PA_I</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rn8209.o(i.Read_HLW8112_PA_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read_HLW8112_PA_I &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
</UL>

<P><STRONG><a name="[217]"></a>Read_HLW8112_RegData</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, rn8209.o(i.Read_HLW8112_RegData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_ReadReg
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_ReadByte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_EN
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_underVoltage
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_V_Zero
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_U
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_PA_I
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_EA
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_CheckSum_HLW8112_Calfactor
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
</UL>

<P><STRONG><a name="[21c]"></a>Read_HLW8112_U</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rn8209.o(i.Read_HLW8112_U))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read_HLW8112_U &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
</UL>

<P><STRONG><a name="[1db]"></a>Recordqueryinfo_WR</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Recordqueryinfo_WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreRecodeCurNum
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlementrecord
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_record
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[1f9]"></a>SIM7600CloseNet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.SIM7600CloseNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = SIM7600CloseNet &rArr; Send_AT_CIPCLOSE &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[1f6]"></a>SIM7600Reset</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, modulea7680c.o(i.SIM7600Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = SIM7600Reset &rArr; Send_AT_CIPCLOSE &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETCLOSE
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[28c]"></a>SIM7600_RecvDesposeCmd</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, modulea7680c.o(i.SIM7600_RecvDesposeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SIM7600_RecvDesposeCmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
</UL>

<P><STRONG><a name="[263]"></a>Send_AT_CIPMODE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_CIPMODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_CIPMODE &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[289]"></a>Send_AT_CIPRXGET</STRONG> (Thumb, 74 bytes, Stack size 80 bytes, modulea7680c.o(i.Send_AT_CIPRXGET))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIPRXGET &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ActRecv1_Ack
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ActRecv0_Ack
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[261]"></a>Send_AT_CSQ</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_CSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_CSQ &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[1fe]"></a>SetVariColor</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dwinprotocol.o(i.SetVariColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = SetVariColor &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
</UL>

<P><STRONG><a name="[244]"></a>Set_V_Zero</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, rn8209.o(i.Set_V_Zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set_V_Zero &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteReg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_EN
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>

<P><STRONG><a name="[28e]"></a>Set_judge_rete_info</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Set_judge_rete_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = Set_judge_rete_info &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[245]"></a>Set_underVoltage</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, rn8209.o(i.Set_underVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set_underVoltage &rArr; Read_HLW8112_RegData &rArr; HLW8112_SPI_ReadReg &rArr; HLW8112_SPI_WriteByte &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HLW8112_RegData
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_EN
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_WriteREG_DIS
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteReg
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_EN
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
</UL>

<P><STRONG><a name="[28f]"></a>StoreRecodeCurNum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dwin_com_pro.o(i.StoreRecodeCurNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = StoreRecodeCurNum &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
</UL>

<P><STRONG><a name="[1d6]"></a>StrToHex</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, dwin_com_pro.o(i.StrToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StrToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>

<P><STRONG><a name="[1ec]"></a>Swap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cp.o(i.Swap))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
</UL>

<P><STRONG><a name="[74]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_common.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, system_at32f403a_407.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_hwtimer.o(i.TMR3_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMR3_GLOBAL_IRQHandler &rArr; rt_device_hwtimer_isr &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_flag_get
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_flag_clear
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>Task4GMain</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, 4gmain.o(i.Task4GMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = Task4GMain &rArr; Module_HTTPDownload &rArr; Send_AT_HTTPPAR &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToProgramCode
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_system_reset
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPMODE
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 4gmain.o(i._4G_main_init)
</UL>
<P><STRONG><a name="[ca]"></a>Task4GRecv</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, 4grecv.o(i.Task4GRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Task4GRecv &rArr; hy4g_port_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_RecvFrameDispose
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600_RecvDesposeCmd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetNetNotConect
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetAppRegisterState
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hy4g_port_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 4grecv.o(i._4G_recv_init)
</UL>
<P><STRONG><a name="[cb]"></a>Task4GSend</STRONG> (Thumb, 712 bytes, Stack size 48 bytes, 4gsend.o(i.Task4GSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220 + Unknown Stack Size
<LI>Call Chain = Task4GSend &rArr; _4G_SendCardInfo &rArr; HY_SendCardInfo &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendStartCharge
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendFrameDispose
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZF_SendBill
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SetStartType
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendVinInfo
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendStopAck
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendStartAck
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendSetTimeAck
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendRateMode
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendRateAck
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendQueryRate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendFrameDispose
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendDevState
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendCardVinCharge
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendCardInfo
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SendBill
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSendBill
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetResendBillState
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetResendBillState
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CSQ
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Status
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBillInfo
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendQueryRateAck
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 4gsend.o(i._4G_send_init)
</UL>
<P><STRONG><a name="[a9]"></a>UART4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = UART4_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>UART5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = UART5_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[255]"></a>UART_4GWrite</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, 4gmain.o(i.UART_4GWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CSQ
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPMODE
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_SetCIPRXGET
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_READ
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NOTCIPMODE
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETOPEN
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETCLOSE
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPTERM
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPPAR
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPINIT
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_GET
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_EnterATCmd
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPSEND
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIMI
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CGDCONT
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_EnterATCmd_Ack
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
</UL>

<P><STRONG><a name="[9a]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USART1_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>USART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USART2_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>USART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USART3_IRQHandler &rArr; usart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403a_407.o(RESET)
</UL>
<P><STRONG><a name="[2b1]"></a>Unlock_Transactionrecord</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Unlock_Transactionrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = Unlock_Transactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[2b2]"></a>Unlock_settlement</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, read_nuid.o(i.Unlock_settlement))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = Unlock_settlement &rArr; app_read_nuid &rArr; PICC_ReadCardSerial &rArr; PICC_Select &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlementrecord
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_judge_rete_info
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_card_money
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
</UL>

<P><STRONG><a name="[2ba]"></a>Unlock_settlementrecord</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Unlock_settlementrecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = Unlock_settlementrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[2bb]"></a>Write_OutageRecharg_flag</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dwin_com_pro.o(i.Write_OutageRecharg_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = Write_OutageRecharg_flag &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[230]"></a>WriterFmBill</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, dwin_com_pro.o(i.WriterFmBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = WriterFmBill &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pre4GBill
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRecordAck
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_WriterFmBill
</UL>

<P><STRONG><a name="[2a2]"></a>ZF_SendBill</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, zfframe.o(i.ZF_SendBill))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2ac]"></a>ZF_SendFrameDispose</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, zfframe.o(i.ZF_SendFrameDispose))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[29e]"></a>ZF_SendStartCharge</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, zfframe.o(i.ZF_SendStartCharge))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[1d8]"></a>_4G_GetStartType</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, 4gmain.o(i._4G_GetStartType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _4G_GetStartType
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetHYStartType
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[299]"></a>_4G_RecvFrameDispose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, 4gmain.o(i._4G_RecvFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _4G_RecvFrameDispose &rArr; HY_RecvFrameDispose &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvFrameDispose
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
</UL>

<P><STRONG><a name="[2a0]"></a>_4G_SendBill</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = _4G_SendBill &rArr; HY_SendBill &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2a9]"></a>_4G_SendCardInfo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172 + Unknown Stack Size
<LI>Call Chain = _4G_SendCardInfo &rArr; HY_SendCardInfo &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2a8]"></a>_4G_SendCardVinCharge</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 4gmain.o(i._4G_SendCardVinCharge))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2a3]"></a>_4G_SendDevState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendDevState))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + Unknown Stack Size
<LI>Call Chain = _4G_SendDevState &rArr; HY_SendDevStateA &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateB
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2ab]"></a>_4G_SendFrameDispose</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _4G_SendFrameDispose &rArr; HY_SendFrameDispose
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendFrameDispose
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2a5]"></a>_4G_SendQueryRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 4gmain.o(i._4G_SendQueryRate))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2a4]"></a>_4G_SendRateAck</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendRateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 964 + Unknown Stack Size
<LI>Call Chain = _4G_SendRateAck &rArr; HY_SendRateAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendRateAck
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2a6]"></a>_4G_SendRateMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 4gmain.o(i._4G_SendRateMode))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2a7]"></a>_4G_SendSetTimeAck</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 4gmain.o(i._4G_SendSetTimeAck))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[29d]"></a>_4G_SendStartAck</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendStartAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = _4G_SendStartAck &rArr; HY_SendStartAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStartAck
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[29f]"></a>_4G_SendStopAck</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 4gmain.o(i._4G_SendStopAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = _4G_SendStopAck &rArr; HY_SendStopAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendStopAck
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2aa]"></a>_4G_SendVinInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 4gmain.o(i._4G_SendVinInfo))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2a1]"></a>_4G_SetStartType</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, 4gmain.o(i._4G_SetStartType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _4G_SetStartType
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetHYStartType
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
</UL>

<P><STRONG><a name="[2c2]"></a>_HY_RestUpdataData</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hyframe.o(i._HY_RestUpdataData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _HY_RestUpdataData
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBillInfo
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
</UL>

<P><STRONG><a name="[2d4]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2c3]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_package_translate_to_int
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_data_parse_by_format_to_float
</UL>

<P><STRONG><a name="[2d1]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2c5]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2c4]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2cc]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2c7]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2cd]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2d5]"></a>__rt_libc_exit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stdlib.o(i.__rt_libc_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3ae]"></a>_crc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dlt645_data.o(i._crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _crc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_send_msg
</UL>

<P><STRONG><a name="[19d]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1c9]"></a>_sys_close</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, syscalls.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _sys_close &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[191]"></a>_sys_exit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscalls.o(i._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _sys_exit &rArr; __rt_libc_exit &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[1c1]"></a>_sys_flen</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, syscalls.o(i._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _sys_flen &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1c2]"></a>_sys_istty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, syscalls.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[1c5]"></a>_sys_open</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, syscalls.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _sys_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1ce]"></a>_sys_seek</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, syscalls.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _sys_seek &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1cf]"></a>_sys_write</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, syscalls.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = _sys_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1d1]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, syscalls.o(i._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _ttywrch &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[324]"></a>adc_base_config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_base_config))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[323]"></a>adc_base_default_para_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_base_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[328]"></a>adc_calibration_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_calibration_init))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[329]"></a>adc_calibration_init_status_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_calibration_init_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[32a]"></a>adc_calibration_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_calibration_start))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[32b]"></a>adc_calibration_status_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_calibration_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[325]"></a>adc_combine_mode_select</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_combine_mode_select))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[327]"></a>adc_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[340]"></a>adc_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_adc_value
</UL>

<P><STRONG><a name="[33e]"></a>adc_ordinary_channel_set</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, at32f403a_407_adc.o(i.adc_ordinary_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_ordinary_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_adc_value
</UL>

<P><STRONG><a name="[341]"></a>adc_ordinary_conversion_data_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_ordinary_conversion_data_get))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_adc_value
</UL>

<P><STRONG><a name="[326]"></a>adc_ordinary_conversion_trigger_set</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_ordinary_conversion_trigger_set))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[33f]"></a>adc_ordinary_software_trigger_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_adc.o(i.adc_ordinary_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_adc_value
</UL>

<P><STRONG><a name="[15c]"></a>agile_led_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, agile_led.o(i.agile_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = agile_led_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> agile_led.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[318]"></a>agile_led_off</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, agile_led.o(i.agile_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agile_led_off &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_process
</UL>

<P><STRONG><a name="[319]"></a>agile_led_on</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, agile_led.o(i.agile_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = agile_led_on &rArr; rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_process
</UL>

<P><STRONG><a name="[31a]"></a>agile_led_stop</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, agile_led.o(i.agile_led_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = agile_led_stop &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_slist_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_process
</UL>

<P><STRONG><a name="[2b3]"></a>app_read_nuid</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, read_nuid.o(i.app_read_nuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = app_read_nuid &rArr; PICC_ReadCardSerial &rArr; PICC_Select &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_reset
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_ReadCardSerial
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsNewCardPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[31e]"></a>asctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.asctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = asctime &rArr; asctime_r &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[31f]"></a>asctime_r</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, time.o(i.asctime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = asctime_r &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num2str
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[336]"></a>at32_flash_erase</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drv_flash.o(i.at32_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at32_flash_erase &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_page
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_erase
</UL>

<P><STRONG><a name="[33b]"></a>at32_flash_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, drv_flash.o(i.at32_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at32_flash_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_read
</UL>

<P><STRONG><a name="[33c]"></a>at32_flash_write</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, drv_flash.o(i.at32_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = at32_flash_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_program
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_write
</UL>

<P><STRONG><a name="[322]"></a>at32_msp_adc_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, at32_msp.o(i.at32_msp_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = at32_msp_adc_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
</UL>

<P><STRONG><a name="[346]"></a>at32_msp_hwtmr_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, at32_msp.o(i.at32_msp_hwtmr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at32_msp_hwtmr_init &rArr; crm_periph_clock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
</UL>

<P><STRONG><a name="[347]"></a>at32_msp_spi_init</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, at32_msp.o(i.at32_msp_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = at32_msp_spi_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[348]"></a>at32_msp_tmr_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, at32_msp.o(i.at32_msp_tmr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = at32_msp_tmr_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[32c]"></a>at32_msp_usart_init</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, at32_msp.o(i.at32_msp_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = at32_msp_usart_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[45c]"></a>bpr_data_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f403a_407_bpr.o(i.bpr_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[47c]"></a>bpr_data_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_bpr.o(i.bpr_data_write))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
</UL>

<P><STRONG><a name="[35f]"></a>ch_charging</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, chproc.o(i.ch_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ch_charging &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_ch_send_dip
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[364]"></a>ch_cplt_func</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, chproc.o(i.ch_cplt_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ch_cplt_func &rArr; ch_is_over_volt &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_insert
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_stop
</UL>

<P><STRONG><a name="[36b]"></a>ch_ctl_disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, chproc.o(i.ch_ctl_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ch_ctl_disable &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
</UL>

<P><STRONG><a name="[36c]"></a>ch_ctl_enable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, chproc.o(i.ch_ctl_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ch_ctl_enable &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
</UL>

<P><STRONG><a name="[36d]"></a>ch_ctl_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, chproc.o(i.ch_ctl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ch_ctl_init &rArr; rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
</UL>

<P><STRONG><a name="[36e]"></a>ch_cycle_get_8209</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, chtask.o(i.ch_cycle_get_8209))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ch_cycle_get_8209 &rArr; HLW8112_Measure &rArr; Init_HLW8112 &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112DataDispose
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_cycle_proc
</UL>

<P><STRONG><a name="[36f]"></a>ch_fault_proc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, chproc.o(i.ch_fault_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ch_fault_proc &rArr; ch_is_over_volt &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[371]"></a>ch_get_cp_state_info</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, chtask.o(i.ch_get_cp_state_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ch_get_cp_state_info &rArr; ch_get_cp_volt &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_entry
</UL>

<P><STRONG><a name="[372]"></a>ch_get_cp_volt</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, cp.o(i.ch_get_cp_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ch_get_cp_volt &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_state_info
</UL>

<P><STRONG><a name="[360]"></a>ch_info_update</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, chproc.o(i.ch_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = ch_info_update &rArr; get_q_money &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_q_money
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_precharge
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
</UL>

<P><STRONG><a name="[376]"></a>ch_insert_proc</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, chproc.o(i.ch_insert_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = ch_insert_proc &rArr; mode5 &rArr; APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode5
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_start
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_insert
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[1ee]"></a>ch_is_cp_off</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, chproc.o(i.ch_is_cp_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ch_is_cp_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_flag
</UL>

<P><STRONG><a name="[37a]"></a>ch_is_end_condition</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, chproc.o(i.ch_is_end_condition))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ch_is_end_condition &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
</UL>

<P><STRONG><a name="[365]"></a>ch_is_fault</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, chproc.o(i.ch_is_fault))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[369]"></a>ch_is_insert</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, chproc.o(i.ch_is_insert))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[37b]"></a>ch_is_low_current</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, chproc.o(i.ch_is_low_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ch_is_low_current &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
</UL>

<P><STRONG><a name="[366]"></a>ch_is_over_current</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, chproc.o(i.ch_is_over_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ch_is_over_current &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[367]"></a>ch_is_over_volt</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, chproc.o(i.ch_is_over_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ch_is_over_volt &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[378]"></a>ch_is_start</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, chproc.o(i.ch_is_start))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
</UL>

<P><STRONG><a name="[361]"></a>ch_is_stp</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, chproc.o(i.ch_is_stp))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ch_is_stp &rArr; ch_is_end_condition &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_GetStartType
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;money_not_enough
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_low_current
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_fault
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_end_condition
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_cp_off
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
</UL>

<P><STRONG><a name="[368]"></a>ch_is_under_volt</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, chproc.o(i.ch_is_under_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ch_is_under_volt &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[36a]"></a>ch_jump_new_stat</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, chproc.o(i.ch_jump_new_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ch_jump_new_stat
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_precharge
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>

<P><STRONG><a name="[37f]"></a>ch_loop_proc</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, chproc.o(i.ch_loop_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = ch_loop_proc &rArr; ch_insert_proc &rArr; mode5 &rArr; APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_stop
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_standy_proc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_precharge
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_fault_proc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_entry
</UL>

<P><STRONG><a name="[382]"></a>ch_precharge</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, chproc.o(i.ch_precharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ch_precharge &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_ch_send_dip
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[380]"></a>ch_standy_proc</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, chproc.o(i.ch_standy_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ch_standy_proc &rArr; ch_is_over_volt &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[379]"></a>ch_start_func</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, chproc.o(i.ch_start_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ch_start_func &rArr; StoreRecodeCurNum &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_ch_puls
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreRecodeCurNum
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_enable
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
</UL>

<P><STRONG><a name="[362]"></a>ch_stop_func</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, chproc.o(i.ch_stop_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = ch_stop_func &rArr; ch_ctl_disable &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_full
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_insert
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
</UL>

<P><STRONG><a name="[388]"></a>ch_task_cycle_proc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chtask.o(i.ch_task_cycle_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = ch_task_cycle_proc &rArr; ch_cycle_get_8209 &rArr; HLW8112_Measure &rArr; Init_HLW8112 &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8209
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_entry
</UL>

<P><STRONG><a name="[389]"></a>ch_task_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, chtask.o(i.ch_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ch_task_init &rArr; mq_service_bind &rArr; rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_adc_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_init
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_disable
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_io_init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_entry
</UL>

<P><STRONG><a name="[385]"></a>ch_task_tcu_msg_proc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chtask.o(i.ch_task_tcu_msg_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ch_task_tcu_msg_proc &rArr; ch_from_ctl_msg &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_from_ctl_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_msg_proc
</UL>

<P><STRONG><a name="[381]"></a>ch_wait_car_ready</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, chproc.o(i.ch_wait_car_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ch_wait_car_ready &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_ch_send_dip
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[383]"></a>ch_wait_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chproc.o(i.ch_wait_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ch_wait_stop &rArr; ch_cplt_func &rArr; ch_is_over_volt &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cplt_func
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>

<P><STRONG><a name="[169]"></a>cmd_free</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, msh.o(i.cmd_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = cmd_free &rArr; rt_memory_info &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[168]"></a>cmd_ps</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, msh.o(i.cmd_ps))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = cmd_ps &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[38a]"></a>cp_adc_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cp.o(i.cp_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = cp_adc_init &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
</UL>

<P><STRONG><a name="[386]"></a>cp_pwm_ch_puls</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cp.o(i.cp_pwm_ch_puls))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cp_pwm_ch_puls &rArr; rt_pwm_set &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
</UL>

<P><STRONG><a name="[387]"></a>cp_pwm_full</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cp.o(i.cp_pwm_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cp_pwm_full &rArr; rt_pwm_set &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_stop_func
</UL>

<P><STRONG><a name="[38b]"></a>cp_pwm_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cp.o(i.cp_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = cp_pwm_init &rArr; hwtimer_sample &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pwm_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_sample
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_full
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
</UL>

<P><STRONG><a name="[49a]"></a>crm_ahb_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_ahb_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[49c]"></a>crm_apb1_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_apb1_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[49b]"></a>crm_apb2_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_apb2_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[49d]"></a>crm_auto_step_mode_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_auto_step_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[2ed]"></a>crm_clock_source_enable</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_clock_source_enable))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
</UL>

<P><STRONG><a name="[352]"></a>crm_clocks_freq_get</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, at32f403a_407_crm.o(i.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pclk_get
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_ctrl
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pclk_get
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[2ee]"></a>crm_flag_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at32f403a_407_crm.o(i.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
</UL>

<P><STRONG><a name="[499]"></a>crm_hext_clock_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_hext_clock_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[398]"></a>crm_hext_stable_wait</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, at32f403a_407_crm.o(i.crm_hext_stable_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crm_hext_stable_wait &rArr; crm_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[2eb]"></a>crm_periph_clock_enable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f403a_407_crm.o(i.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_tmr_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_spi_init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_hwtmr_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_adc_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[48b]"></a>crm_periph_reset</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f403a_407_crm.o(i.crm_periph_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_reset
</UL>

<P><STRONG><a name="[498]"></a>crm_pll_config</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, at32f403a_407_crm.o(i.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[497]"></a>crm_reset</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[459]"></a>crm_rtc_clock_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_rtc_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[458]"></a>crm_rtc_clock_select</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_rtc_clock_select))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[49e]"></a>crm_sysclk_switch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_sysclk_switch))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[397]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_crm.o(i.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>

<P><STRONG><a name="[399]"></a>ctime</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, time.o(i.ctime))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ctime &rArr; asctime &rArr; asctime_r &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
</UL>

<P><STRONG><a name="[39b]"></a>data_package_translate_to_int</STRONG> (Thumb, 272 bytes, Stack size 80 bytes, dlt645_data.o(i.data_package_translate_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = data_package_translate_to_int &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_data_parse_by_format_to_float
</UL>

<P><STRONG><a name="[39f]"></a>dlt645_1997_read_data</STRONG> (Thumb, 152 bytes, Stack size 104 bytes, dlt645_1997.o(i.dlt645_1997_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dlt645_1997_read_data &rArr; dlt645_1997_parsing_data &rArr; dlt645_data_parse_by_format_to_float &rArr; data_package_translate_to_int &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_1997_parsing_data
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_send_msg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_receive_msg
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_read_data
</UL>

<P><STRONG><a name="[3a2]"></a>dlt645_1997_recv_check</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, dlt645_1997.o(i.dlt645_1997_recv_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dlt645_1997_recv_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_common_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_receive_msg
</UL>

<P><STRONG><a name="[3a4]"></a>dlt645_2007_parsing_data</STRONG> (Thumb, 750 bytes, Stack size 24 bytes, dlt645_2007.o(i.dlt645_2007_parsing_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dlt645_2007_parsing_data &rArr; dlt645_data_parse_by_format_to_float &rArr; data_package_translate_to_int &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_data_parse_by_format_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_2007_read_data
</UL>

<P><STRONG><a name="[3a5]"></a>dlt645_2007_read_data</STRONG> (Thumb, 174 bytes, Stack size 104 bytes, dlt645_2007.o(i.dlt645_2007_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = dlt645_2007_read_data &rArr; dlt645_2007_parsing_data &rArr; dlt645_data_parse_by_format_to_float &rArr; data_package_translate_to_int &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_send_msg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_receive_msg
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_2007_parsing_data
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_read_data
</UL>

<P><STRONG><a name="[3a6]"></a>dlt645_2007_recv_check</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, dlt645_2007.o(i.dlt645_2007_recv_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dlt645_2007_recv_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_common_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_receive_msg
</UL>

<P><STRONG><a name="[3a3]"></a>dlt645_common_check</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, dlt645_data.o(i.dlt645_common_check))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_1997_recv_check
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_2007_recv_check
</UL>

<P><STRONG><a name="[39e]"></a>dlt645_data_parse_by_format_to_float</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, dlt645_data.o(i.dlt645_data_parse_by_format_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = dlt645_data_parse_by_format_to_float &rArr; data_package_translate_to_int &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_package_translate_to_int
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_1997_parsing_data
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_2007_parsing_data
</UL>

<P><STRONG><a name="[157]"></a>dlt645_port_init</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, dlt645_port.o(i.dlt645_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = dlt645_port_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlt645_port.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[3ad]"></a>dlt645_read_data</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dlt645.o(i.dlt645_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = dlt645_read_data &rArr; dlt645_1997_read_data &rArr; dlt645_1997_parsing_data &rArr; dlt645_data_parse_by_format_to_float &rArr; data_package_translate_to_int &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_1997_read_data
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_2007_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_485_sendrecv_entry
</UL>

<P><STRONG><a name="[3a1]"></a>dlt645_receive_msg</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, dlt645.o(i.dlt645_receive_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dlt645_receive_msg &rArr; dlt645_1997_recv_check
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_1997_recv_check
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_2007_recv_check
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_1997_read_data
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_2007_read_data
</UL>

<P><STRONG><a name="[3a0]"></a>dlt645_send_msg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dlt645.o(i.dlt645_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dlt645_send_msg &rArr; _crc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_1997_read_data
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_2007_read_data
</UL>

<P><STRONG><a name="[424]"></a>dlt645_set_addr</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, dlt645.o(i.dlt645_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dlt645_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_485_sendrecv_entry
</UL>

<P><STRONG><a name="[3bb]"></a>dwin_port_init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, dwin_com_pro.o(i.dwin_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dwin_port_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_com_init
</UL>

<P><STRONG><a name="[37d]"></a>electricity_err</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, chproc.o(i.electricity_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = electricity_err &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
</UL>

<P><STRONG><a name="[34a]"></a>exint_default_para_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_exint.o(i.exint_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[3ed]"></a>exint_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f403a_407_exint.o(i.exint_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
</UL>

<P><STRONG><a name="[20e]"></a>exint_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f403a_407_exint.o(i.exint_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT9_5_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT15_10_IRQHandler
</UL>

<P><STRONG><a name="[34c]"></a>exint_init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, at32f403a_407_exint.o(i.exint_init))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[2ca]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3c4]"></a>fal_flash_device_find</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fal_flash.o(i.fal_flash_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fal_flash_device_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[3ca]"></a>fal_flash_init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, fal_flash.o(i.fal_flash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = fal_flash_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[3cb]"></a>fal_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fal.o(i.fal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = fal_init &rArr; fal_partition_init &rArr; fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[3c3]"></a>fal_init_check</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fal.o(i.fal_init_check))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[25e]"></a>fal_partition_APPOTA</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dwin_com_pro.o(i.fal_partition_APPOTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = fal_partition_APPOTA &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[1f0]"></a>fal_partition_erase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fal_partition.o(i.fal_partition_erase))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nor_dev_erase
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_OutageRecharg_flag
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_judge_rete_info
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passwordmodify
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_PortSert
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP4Sert
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP3Sert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP2Sert
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP1Sert
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_DevnumDispose
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Company_code
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>

<P><STRONG><a name="[3c5]"></a>fal_partition_find</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fal_partition.o(i.fal_partition_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = fal_partition_find &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
</UL>

<P><STRONG><a name="[3cc]"></a>fal_partition_init</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, fal_partition.o(i.fal_partition_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = fal_partition_init &rArr; fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>

<P><STRONG><a name="[284]"></a>fal_partition_read</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, fal_partition.o(i.fal_partition_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = fal_partition_read &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFmBill
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nor_dev_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
</UL>

<P><STRONG><a name="[1f1]"></a>fal_partition_write</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, fal_partition.o(i.fal_partition_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_APPOTA
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nor_dev_write
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_OutageRecharg_flag
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_judge_rete_info
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;passwordmodify
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_PortSert
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP4Sert
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP3Sert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP2Sert
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_IP1Sert
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_DevnumDispose
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Company_code
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>

<P><STRONG><a name="[3c6]"></a>fal_show_part_table</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, fal_partition.o(i.fal_show_part_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = fal_show_part_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
</UL>

<P><STRONG><a name="[3cf]"></a>finsh_get_prompt</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, shell.o(i.finsh_get_prompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_get_prompt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[3d2]"></a>finsh_getchar</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, shell.o(i.finsh_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = finsh_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3d4]"></a>finsh_set_device</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, shell.o(i.finsh_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3d6]"></a>finsh_set_prompt_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, shell.o(i.finsh_set_prompt_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_set_prompt_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[3d7]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(i.finsh_system_function_init))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[159]"></a>finsh_system_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, shell.o(i.finsh_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = finsh_system_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[d6]"></a>finsh_thread_entry</STRONG> (Thumb, 1272 bytes, Stack size 0 bytes, shell.o(i.finsh_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = finsh_thread_entry &rArr; finsh_getchar &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_system_init)
</UL>
<P><STRONG><a name="[3e0]"></a>flash_bank1_operation_status_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, at32f403a_407_flash.o(i.flash_bank1_operation_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_wait_for
</UL>

<P><STRONG><a name="[3df]"></a>flash_bank1_operation_wait_for</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, at32f403a_407_flash.o(i.flash_bank1_operation_wait_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_bank1_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_program
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
</UL>

<P><STRONG><a name="[3e2]"></a>flash_bank2_operation_status_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, at32f403a_407_flash.o(i.flash_bank2_operation_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_wait_for
</UL>

<P><STRONG><a name="[3e1]"></a>flash_bank2_operation_wait_for</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, at32f403a_407_flash.o(i.flash_bank2_operation_wait_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_bank2_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_program
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
</UL>

<P><STRONG><a name="[33a]"></a>flash_lock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32f403a_407_flash.o(i.flash_lock))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_erase
</UL>

<P><STRONG><a name="[339]"></a>flash_sector_erase</STRONG> (Thumb, 252 bytes, Stack size 12 bytes, at32f403a_407_flash.o(i.flash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_sector_erase &rArr; flash_spim_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spim_operation_wait_for
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_wait_for
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_wait_for
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_erase
</UL>

<P><STRONG><a name="[3e6]"></a>flash_spim_operation_status_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, at32f403a_407_flash.o(i.flash_spim_operation_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spim_operation_wait_for
</UL>

<P><STRONG><a name="[3e5]"></a>flash_spim_operation_wait_for</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, at32f403a_407_flash.o(i.flash_spim_operation_wait_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_spim_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spim_operation_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_word_program
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
</UL>

<P><STRONG><a name="[337]"></a>flash_unlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f403a_407_flash.o(i.flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_erase
</UL>

<P><STRONG><a name="[33d]"></a>flash_word_program</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, at32f403a_407_flash.o(i.flash_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_word_program &rArr; flash_spim_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_spim_operation_wait_for
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank2_operation_wait_for
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_bank1_operation_wait_for
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_write
</UL>

<P><STRONG><a name="[c7]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1bb]"></a>free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall_mem.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = free &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[375]"></a>get_q_money</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, chproc.o(i.get_q_money))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = get_q_money &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
</UL>

<P><STRONG><a name="[41d]"></a>get_uid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mfrc522.o(i.get_uid))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[3ea]"></a>gmtime_r</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, time.o(i.gmtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_is_dst
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>

<P><STRONG><a name="[490]"></a>gpio_bits_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f403a_407_gpio.o(i.gpio_bits_reset))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_sr1
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
</UL>

<P><STRONG><a name="[48c]"></a>gpio_bits_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f403a_407_gpio.o(i.gpio_bits_set))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_sr1
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
</UL>

<P><STRONG><a name="[34e]"></a>gpio_bits_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_gpio.o(i.gpio_bits_write))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_write
</UL>

<P><STRONG><a name="[344]"></a>gpio_default_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f403a_407_gpio.o(i.gpio_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_tmr_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_spi_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_adc_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_mode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[20c]"></a>gpio_exint_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, drv_gpio.o(i.gpio_exint_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_exint_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_flag_clear
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT9_5_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT4_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT3_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT2_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT1_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT15_10_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT0_IRQHandler
</UL>

<P><STRONG><a name="[34b]"></a>gpio_exint_line_config</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, at32f403a_407_gpio.o(i.gpio_exint_line_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exint_line_config
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[345]"></a>gpio_init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, at32f403a_407_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_tmr_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_spi_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_adc_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_mode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[34d]"></a>gpio_input_data_bit_read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f403a_407_gpio.o(i.gpio_input_data_bit_read))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_read
</UL>

<P><STRONG><a name="[298]"></a>hy4g_port_init</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, 4grecv.o(i.hy4g_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = hy4g_port_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
</UL>

<P><STRONG><a name="[38c]"></a>input_io_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ch_in_io.o(i.input_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = input_io_init &rArr; rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
</UL>

<P><STRONG><a name="[d9]"></a>input_io_period_check</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ch_in_io.o(i.input_io_period_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = input_io_period_check &rArr; rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_set_input_io_fault
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_input_io_fault_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch_in_io.o(i.input_io_init)
</UL>
<P><STRONG><a name="[da]"></a>led_thread_entry</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, led_thread.o(i.led_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = led_thread_entry &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_thread.o(i.led_thread_init)
</UL>
<P><STRONG><a name="[15b]"></a>led_thread_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, led_thread.o(i.led_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = led_thread_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led_thread.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[175]"></a>list_device</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, cmd.o(i.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[16e]"></a>list_event</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[170]"></a>list_mailbox</STRONG> (Thumb, 224 bytes, Stack size 104 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[172]"></a>list_memheap</STRONG> (Thumb, 158 bytes, Stack size 96 bytes, cmd.o(i.list_memheap))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_memheap &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[173]"></a>list_mempool</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, cmd.o(i.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[171]"></a>list_msgqueue</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[16f]"></a>list_mutex</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[16d]"></a>list_sem</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[16c]"></a>list_thread</STRONG> (Thumb, 294 bytes, Stack size 232 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[174]"></a>list_timer</STRONG> (Thumb, 212 bytes, Stack size 96 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_next
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[39a]"></a>localtime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i.localtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = localtime &rArr; localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[404]"></a>localtime_r</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, time.o(i.localtime_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = localtime_r &rArr; gmtime_r
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_get
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[407]"></a>localtime_to_cp56time</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, ch_port.o(i.localtime_to_cp56time))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = localtime_to_cp56time
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[406]"></a>$Super$$main</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_to_cp56time
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[dc]"></a>main_thread_entry</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, components.o(i.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[1c3]"></a>malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, syscall_mem.o(i.malloc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[40a]"></a>mktime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, time.o(i.mktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mktime &rArr; timegm
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tz_get
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>

<P><STRONG><a name="[377]"></a>mode5</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, read_nuid.o(i.mode5))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = mode5 &rArr; APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_insert_proc
</UL>

<P><STRONG><a name="[37e]"></a>money_not_enough</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, chproc.o(i.money_not_enough))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
</UL>

<P><STRONG><a name="[29b]"></a>mq_service_bind</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, mq_service.o(i.mq_service_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = mq_service_bind &rArr; rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_moduleid_exist
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[2b7]"></a>mq_service_card_send_disp</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_card_send_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mq_service_card_send_disp &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_Notcalculated
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[363]"></a>mq_service_ch_send_dip</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_ch_send_dip))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_from_ctl_msg
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_precharge
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
</UL>

<P><STRONG><a name="[3c1]"></a>mq_service_dwinrecv_send_disp</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_dwinrecv_send_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mq_service_dwinrecv_send_disp &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_uart_read
</UL>

<P><STRONG><a name="[40c]"></a>mq_service_moduleid_exist</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mq_service.o(i.mq_service_moduleid_exist))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>

<P><STRONG><a name="[29c]"></a>mq_service_recv_msg</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_recv_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = mq_service_recv_msg &rArr; rt_mq_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_moduleid_exist
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_msg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[40f]"></a>mq_service_send_msg</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, mq_service.o(i.mq_service_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_moduleid_exist
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_ch_send_dip
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_xxx_send_msg_to_chtask
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_dwinrecv_send_disp
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
</UL>

<P><STRONG><a name="[22c]"></a>mq_service_send_to_4gsend</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_send_to_4gsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStopCharge
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStartCharge
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRateSet
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvQueryRate
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvQueryBill
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvDevInfoAck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[412]"></a>mq_service_xxx_send_msg_to_chtask</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, mq_service.o(i.mq_service_xxx_send_msg_to_chtask))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = mq_service_xxx_send_msg_to_chtask &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
</UL>

<P><STRONG><a name="[413]"></a>msh_auto_complete</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, msh.o(i.msh_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[3de]"></a>msh_exec</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, msh.o(i.msh_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = msh_exec &rArr; _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[167]"></a>msh_help</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, msh.o(i.msh_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msh.o(FSymTab)
</UL>
<P><STRONG><a name="[333]"></a>nvic_irq_disable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32f403a_407_misc.o(i.nvic_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[335]"></a>nvic_irq_enable</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, at32f403a_407_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
</UL>

<P><STRONG><a name="[440]"></a>nvic_priority_group_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32f403a_407_misc.o(i.nvic_priority_group_config))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[297]"></a>nvic_system_reset</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, at32f403a_407_misc.o(i.nvic_system_reset))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
</UL>

<P><STRONG><a name="[2ec]"></a>pwc_battery_powered_domain_access</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_pwc.o(i.pwc_battery_powered_domain_access))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
</UL>

<P><STRONG><a name="[2b5]"></a>read_card_money</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, read_nuid.o(i.read_card_money))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = read_card_money &rArr; MIFARE_Read &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Authenticate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusCodeName
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[db]"></a>read_card_task</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, read_nuid.o(i.read_card_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = read_card_task &rArr; slotcard_state &rArr; Unlock_settlement &rArr; app_read_nuid &rArr; PICC_ReadCardSerial &rArr; PICC_Select &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_GetStartType
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_OutageRecharg_flag
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_flag
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uid
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_HaltA
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_StopCrypto1
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFRC522
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> read_nuid.o(i.read_nuid_init)
</UL>
<P><STRONG><a name="[2b4]"></a>read_card_type</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, read_nuid.o(i.read_card_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = read_card_type &rArr; MIFARE_Read &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Authenticate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusCodeName
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[2b6]"></a>read_lock_state</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, read_nuid.o(i.read_lock_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = read_lock_state &rArr; MIFARE_Read &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Authenticate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Read
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusCodeName
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[423]"></a>rest_charge_dispose</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, dwin_com_pro.o(i.rest_charge_dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = rest_charge_dispose &rArr; send_ch_ctl_msg &rArr; mq_service_xxx_send_msg_to_chtask &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_SetStartType
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetResendBillState
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HY_RestUpdataData
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_OutageRecharg_flag
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
</UL>

<P><STRONG><a name="[d1]"></a>rt_485_sendrecv_entry</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, dlt645_port.o(i.rt_485_sendrecv_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = rt_485_sendrecv_entry &rArr; dlt645_read_data &rArr; dlt645_1997_read_data &rArr; dlt645_1997_parsing_data &rArr; dlt645_data_parse_by_format_to_float &rArr; data_package_translate_to_int &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_set_addr
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlt645_port.o(i.dlt645_port_init)
</UL>
<P><STRONG><a name="[316]"></a>rt_adc_disable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, adc.o(i.rt_adc_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_adc_disable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[314]"></a>rt_adc_enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, adc.o(i.rt_adc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_adc_enable &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_adc_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[315]"></a>rt_adc_read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, adc.o(i.rt_adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_adc_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_cb
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
</UL>

<P><STRONG><a name="[425]"></a>rt_application_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, components.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[24a]"></a>rt_assert_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, kservice.o(i.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_read
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_enable
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_read
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_io_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_control
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pin_control
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_disable
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_control
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_isr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_start
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_ctrl
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_counter_get
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_putc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_getc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_get_adc_value
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_adc_enabled
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_prompt_mode
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFRC522
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_stop
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_on
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_off
</UL>

<P><STRONG><a name="[3d8]"></a>rt_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, kservice.o(i.rt_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_calloc &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[426]"></a>rt_completion_done</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, completion.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[428]"></a>rt_completion_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, completion.o(i.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[2f6]"></a>rt_completion_wait</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, completion.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>

<P><STRONG><a name="[444]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[408]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(i.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[2fb]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(i.rt_console_get_device))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[42c]"></a>rt_console_set_device</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[429]"></a>rt_critical_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(i.rt_critical_level))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>

<P><STRONG><a name="[3d5]"></a>rt_device_close</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_close &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[3aa]"></a>rt_device_control</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, device.o(i.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hy4g_port_init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_sample
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_get
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_disable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_port_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[249]"></a>rt_device_find</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hy4g_port_init
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pwm_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_adc_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_sample
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_find_by_dev_name
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_port_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_rc522_init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFRC522
</UL>

<P><STRONG><a name="[292]"></a>rt_device_hwtimer_isr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, hwtimer.o(i.rt_device_hwtimer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_device_hwtimer_isr &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[433]"></a>rt_device_hwtimer_register</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hwtimer.o(i.rt_device_hwtimer_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_device_hwtimer_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
</UL>

<P><STRONG><a name="[3a9]"></a>rt_device_open</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_open &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hy4g_port_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_sample
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_port_init
</UL>

<P><STRONG><a name="[435]"></a>rt_device_pin_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pin.o(i.rt_device_pin_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>

<P><STRONG><a name="[436]"></a>rt_device_pwm_register</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rt_drv_pwm.o(i.rt_device_pwm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_device_pwm_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pwm_init
</UL>

<P><STRONG><a name="[3a7]"></a>rt_device_read</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(i.rt_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_read &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hy_hw_read
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_sample
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_hw_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_hw_read
</UL>

<P><STRONG><a name="[434]"></a>rt_device_register</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
</UL>

<P><STRONG><a name="[3ac]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, device.o(i.rt_device_set_rx_indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hy4g_port_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_sample
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_port_init
</UL>

<P><STRONG><a name="[439]"></a>rt_device_unregister</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, device.o(i.rt_device_unregister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_unregister &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
</UL>

<P><STRONG><a name="[2fc]"></a>rt_device_write</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hy_hw_write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_sample
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_hw_write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_hw_write
</UL>

<P><STRONG><a name="[d3]"></a>rt_dwin_period_entry</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, dwin_com_pro.o(i.rt_dwin_period_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = rt_dwin_period_entry &rArr; Period_WriterFmBill &rArr; APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_uart_read
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_WriterFmBill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(i.dwin_com_init)
</UL>
<P><STRONG><a name="[43a]"></a>rt_dwin_state_dispose</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dwin_com_pro.o(i.rt_dwin_state_dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_dwin_state_dispose &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
</UL>

<P><STRONG><a name="[d2]"></a>rt_dwin_thread_entry</STRONG> (Thumb, 878 bytes, Stack size 32 bytes, dwin_com_pro.o(i.rt_dwin_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = rt_dwin_thread_entry &rArr; dwin_show &rArr; Disp_ShowRTC &rArr; Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_GetStartType
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFmBill
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_Notcalculated
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_state_dispose
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_OutageRecharg_flag
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_state
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithKey
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(i.dwin_com_init)
</UL>
<P><STRONG><a name="[286]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadDone_Ack
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpStart_Ack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpGet_Ack
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpConect_Ack
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SetReAct_Ack
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck1Cmd_Ack
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck0Cmd_Ack
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_NETOPEN_Ack
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIPMODE_Ack
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIMI_Ack
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CGDCONT_Ack
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[287]"></a>rt_exit_critical</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadDone_Ack
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ReadData_Ack
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpStart_Ack
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpGet_Ack
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_HttpConect_Ack
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SetReAct_Ack
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck1Cmd_Ack
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck0Cmd_Ack
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_NETOPEN_Ack
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIPMODE_Ack
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIMI_Ack
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CGDCONT_Ack
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[3c8]"></a>rt_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, kservice.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[43d]"></a>rt_hw_adc_register</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, adc.o(i.rt_hw_adc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_hw_adc_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_init
</UL>

<P><STRONG><a name="[43e]"></a>rt_hw_board_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_common.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_hw_board_init &rArr; rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[44f]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[422]"></a>rt_hw_cpu_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_cpu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
</UL>

<P><STRONG><a name="[192]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[14a]"></a>rt_hw_pin_init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drv_gpio.o(i.rt_hw_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_hw_pin_init &rArr; rt_device_pin_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pin_register
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[151]"></a>rt_hw_rtc_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_rtc.o(i.rt_hw_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_hw_rtc_init &rArr; rt_hw_rtc_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[446]"></a>rt_hw_rtc_register</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rtc.o(i.rt_hw_rtc_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_hw_rtc_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
</UL>

<P><STRONG><a name="[447]"></a>rt_hw_serial_isr</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[448]"></a>rt_hw_serial_register</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[14b]"></a>rt_hw_spi_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, drv_spi.o(i.rt_hw_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_hw_spi_init &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[302]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[441]"></a>rt_hw_systick_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, drv_common.o(i.rt_hw_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_systick_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[214]"></a>rt_hw_us_delay</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, drv_common.o(i.rt_hw_us_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_us_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_ReadByte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_EN
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_DIS
</UL>

<P><STRONG><a name="[443]"></a>rt_hw_usart_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, drv_usart.o(i.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[44c]"></a>rt_hw_watchdog_register</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, watchdog.o(i.rt_hw_watchdog_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_hw_watchdog_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdt_init
</UL>

<P><STRONG><a name="[14d]"></a>rt_hw_wdt_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, drv_wdt.o(i.rt_hw_wdt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_hw_wdt_init &rArr; rt_hw_watchdog_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_watchdog_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[20b]"></a>rt_interrupt_enter</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT9_5_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT4_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT3_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT2_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT1_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT15_10_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT0_IRQHandler
</UL>

<P><STRONG><a name="[42a]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>

<P><STRONG><a name="[20d]"></a>rt_interrupt_leave</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT9_5_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT4_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT3_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT2_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT1_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT15_10_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXINT0_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>rt_kprintf</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hy4g_port_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvFrameDispose
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_READ
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_HTTPPAR
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPSEND
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_msg_proc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pwm_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_adc_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwtimer_sample
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_CheckSum_HLW8112_Calfactor
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_q_money
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_stp
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_info_update
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_charging
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFmBill
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_check_buffer_size
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_watchdog_close
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_find_by_dev_name
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hwtimer_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_write
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_read
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_erase
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_wdt_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_rtc_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_control
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_help
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nor_dev_write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nor_dev_read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtd_nor_dev_erase
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_init
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_port_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_card_money
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CardMCUID
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_rc522_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_init
</UL>

<P><STRONG><a name="[270]"></a>rt_malloc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
</UL>

<P><STRONG><a name="[3d9]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_read
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>

<P><STRONG><a name="[3dc]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[38f]"></a>rt_memory_info</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, kservice.o(i.rt_memory_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_memory_info &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_free
</UL>

<P><STRONG><a name="[2e7]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[40d]"></a>rt_mq_create</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ipc.o(i.rt_mq_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
</UL>

<P><STRONG><a name="[40e]"></a>rt_mq_delete</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ipc.o(i.rt_mq_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_mq_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_bind
</UL>

<P><STRONG><a name="[410]"></a>rt_mq_recv</STRONG> (Thumb, 552 bytes, Stack size 64 bytes, ipc.o(i.rt_mq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_mq_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
</UL>

<P><STRONG><a name="[411]"></a>rt_mq_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ipc.o(i.rt_mq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_msg
</UL>

<P><STRONG><a name="[452]"></a>rt_mq_send_wait</STRONG> (Thumb, 534 bytes, Stack size 64 bytes, ipc.o(i.rt_mq_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>

<P><STRONG><a name="[294]"></a>rt_mutex_create</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ipc.o(i.rt_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_init
</UL>

<P><STRONG><a name="[317]"></a>rt_mutex_delete</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_init
</UL>

<P><STRONG><a name="[453]"></a>rt_mutex_detach</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ipc.o(i.rt_mutex_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_mutex_detach &rArr; _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
</UL>

<P><STRONG><a name="[454]"></a>rt_mutex_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[2b0]"></a>rt_mutex_release</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_unlock
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_stop
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_process
</UL>

<P><STRONG><a name="[2af]"></a>rt_mutex_take</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_lock
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_stop
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_process
</UL>

<P><STRONG><a name="[451]"></a>rt_object_allocate</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[431]"></a>rt_object_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[430]"></a>rt_object_detach</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[432]"></a>rt_object_find</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, object.o(i.rt_object_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[403]"></a>rt_object_get_information</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, object.o(i.rt_object_get_information))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find_init
</UL>

<P><STRONG><a name="[304]"></a>rt_object_get_type</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, object.o(i.rt_object_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>

<P><STRONG><a name="[438]"></a>rt_object_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
</UL>

<P><STRONG><a name="[42f]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_alloc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[242]"></a>rt_pin_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(i.rt_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_mode &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_init
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_io_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_rc522_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_entry
</UL>

<P><STRONG><a name="[21f]"></a>rt_pin_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pin.o(i.rt_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_ReadByte
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_io_period_check
</UL>

<P><STRONG><a name="[213]"></a>rt_pin_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pin.o(i.rt_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_WriteByte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_SPI_ReadByte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_EN
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_CS_DIS
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_enable
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_disable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_hw_write
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadReg_Byte
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_on
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_off
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_entry
</UL>

<P><STRONG><a name="[417]"></a>rt_pwm_disable</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, rt_drv_pwm.o(i.rt_pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_pwm_disable &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_disable
</UL>

<P><STRONG><a name="[394]"></a>rt_pwm_enable</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, rt_drv_pwm.o(i.rt_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_pwm_enable &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pwm_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_full
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_ch_puls
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_enable
</UL>

<P><STRONG><a name="[418]"></a>rt_pwm_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rt_drv_pwm.o(i.rt_pwm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_pwm_get &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
</UL>

<P><STRONG><a name="[393]"></a>rt_pwm_set</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, rt_drv_pwm.o(i.rt_pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_pwm_set &rArr; rt_device_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_pwm_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_full
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_ch_puls
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_set
</UL>

<P><STRONG><a name="[300]"></a>rt_schedule</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[306]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[2fd]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[3ab]"></a>rt_sem_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hy4g_port_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_port_init
</UL>

<P><STRONG><a name="[3d3]"></a>rt_sem_release</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_handler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_handler
</UL>

<P><STRONG><a name="[3a8]"></a>rt_sem_take</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_critical_level
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hy_hw_read
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_hw_read
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_getchar
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_hw_read
</UL>

<P><STRONG><a name="[437]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>

<P><STRONG><a name="[460]"></a>rt_sfud_flash_delete</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.rt_sfud_flash_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_sfud_flash_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[3f8]"></a>rt_sfud_flash_find_by_dev_name</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.rt_sfud_flash_find_by_dev_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_sfud_flash_find_by_dev_name &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[461]"></a>rt_sfud_flash_probe</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, spi_flash_sfud.o(i.rt_sfud_flash_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
</UL>

<P><STRONG><a name="[462]"></a>rt_sfud_flash_probe_ex</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_flash_probe_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_sfud_flash_probe_ex &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
</UL>

<P><STRONG><a name="[465]"></a>rt_show_version</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[450]"></a>rt_smem_alloc</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, mem.o(i.rt_smem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_smem_alloc &rArr; rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[43c]"></a>rt_smem_free</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, mem.o(i.rt_smem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_smem_free &rArr; plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[466]"></a>rt_smem_init</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, mem.o(i.rt_smem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_smem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[30e]"></a>rt_soft_timer_check</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, timer.o(i.rt_soft_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_soft_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[44a]"></a>rt_spi_bus_attach_device</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, spi_core.o(i.rt_spi_bus_attach_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_rc522_init
</UL>

<P><STRONG><a name="[469]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(i.rt_spi_bus_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[449]"></a>rt_spi_bus_register</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_core.o(i.rt_spi_bus_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_init
</UL>

<P><STRONG><a name="[31d]"></a>rt_spi_configure</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spi_core.o(i.rt_spi_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_spi_configure &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi_rc522_init
</UL>

<P><STRONG><a name="[46a]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_send_then_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[2f9]"></a>rt_spi_transfer</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, spi_core.o(i.rt_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_read
</UL>

<P><STRONG><a name="[409]"></a>rt_spi_transfer_message</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, spi_core.o(i.rt_spi_transfer_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfrc522_spi_send_then_recv_no_take_no_release
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfrc522_spi_send_no_take_no_release
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mfrc522_spi_recv_no_take_no_release
</UL>

<P><STRONG><a name="[468]"></a>rt_spidev_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(i.rt_spidev_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>

<P><STRONG><a name="[46b]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(i.rt_sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[3c7]"></a>rt_strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kservice.o(i.rt_strcmp))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
</UL>

<P><STRONG><a name="[320]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[457]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[415]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[442]"></a>rt_system_heap_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, kservice.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_system_heap_init &rArr; rt_smem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[479]"></a>rt_system_scheduler_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[46d]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_system_scheduler_start &rArr; rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scheduler_get_highest_priority_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[46f]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[470]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2d7]"></a>rt_thread_control</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
</UL>

<P><STRONG><a name="[2bf]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_recv_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_main_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_send_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_com_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nuid_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_init
</UL>

<P><STRONG><a name="[42e]"></a>rt_thread_defunct_dequeue</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, idle.o(i.rt_thread_defunct_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_thread_defunct_dequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>

<P><STRONG><a name="[2ff]"></a>rt_thread_defunct_enqueue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, idle.o(i.rt_thread_defunct_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[30d]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;retry_delay_100us
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[2c1]"></a>rt_thread_delete</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_recv_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_main_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_send_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_com_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nuid_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_init
</UL>

<P><STRONG><a name="[472]"></a>rt_thread_detach</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, thread.o(i.rt_thread_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_detach &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[474]"></a>rt_thread_idle_init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[471]"></a>rt_thread_init</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
</UL>

<P><STRONG><a name="[228]"></a>rt_thread_mdelay</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, thread.o(i.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_entry
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HLW8112
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_enable
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_ctl_disable
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_485_sendrecv_entry
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent25
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_period_entry
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_DevnumDispose
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slotcard_state
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PICC_IsNewCardPresent
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Reset
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_process
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_entry
</UL>

<P><STRONG><a name="[2db]"></a>rt_thread_resume</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume
</UL>

<P><STRONG><a name="[2d6]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_libc_exit
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_unlock
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heap_lock
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[473]"></a>rt_thread_sleep</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[2c0]"></a>rt_thread_startup</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_recv_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_main_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_4G_send_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_port_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_com_init
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nuid_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_thread_init
</UL>

<P><STRONG><a name="[2e1]"></a>rt_thread_suspend</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[3fc]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, clock.o(i.rt_tick_from_millisecond))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_process
</UL>

<P><STRONG><a name="[1e9]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendFrameDispose
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendBill
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSendBill
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_cycle_get_8209
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112DataDispose
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_car_ready
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_jump_new_stat
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_low_current
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_cp_off
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_period_entry
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_entry
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_process
</UL>

<P><STRONG><a name="[290]"></a>rt_tick_increase</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[476]"></a>rt_timer_check</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[42b]"></a>rt_timer_control</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_control &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>

<P><STRONG><a name="[271]"></a>rt_timer_create</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timer.o(i.rt_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = rt_timer_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_io_init
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Init
</UL>

<P><STRONG><a name="[2fe]"></a>rt_timer_detach</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_exit
</UL>

<P><STRONG><a name="[303]"></a>rt_timer_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_init
</UL>

<P><STRONG><a name="[3f9]"></a>rt_timer_start</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_io_init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
</UL>

<P><STRONG><a name="[475]"></a>rt_timer_stop</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[44e]"></a>rt_vsnprintf</STRONG> (Thumb, 824 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[46c]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(i.rt_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[3e8]"></a>rtc_counter_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f403a_407_rtc.o(i.rtc_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_timestamp
</UL>

<P><STRONG><a name="[47b]"></a>rtc_counter_set</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at32f403a_407_rtc.o(i.rtc_counter_set))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
</UL>

<P><STRONG><a name="[45d]"></a>rtc_divider_set</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at32f403a_407_rtc.o(i.rtc_divider_set))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[45b]"></a>rtc_wait_config_finish</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f403a_407_rtc.o(i.rtc_wait_config_finish))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[45a]"></a>rtc_wait_update_finish</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f403a_407_rtc.o(i.rtc_wait_update_finish))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>

<P><STRONG><a name="[1d2]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[237]"></a>send_ch_ctl_msg</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, dwin_com_pro.o(i.send_ch_ctl_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = send_ch_ctl_msg &rArr; mq_service_xxx_send_msg_to_chtask &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_xxx_send_msg_to_chtask
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStopCharge
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvStartCharge
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_charge_dispose
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[47a]"></a>set_CardMCUID</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, read_nuid.o(i.set_CardMCUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = set_CardMCUID &rArr; MIFARE_Write &rArr; PCD_MIFARE_Transceive &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Authenticate
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Write
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusCodeName
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
</UL>

<P><STRONG><a name="[2b8]"></a>set_card_money</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, read_nuid.o(i.set_card_money))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = set_card_money &rArr; MIFARE_SetValue &rArr; MIFARE_Write &rArr; PCD_MIFARE_Transceive &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Authenticate
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_SetValue
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusCodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[234]"></a>set_date</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, rtc.o(i.set_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = set_date &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeSert
</UL>

<P><STRONG><a name="[235]"></a>set_time</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, rtc.o(i.set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = set_time &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_RecvRegisterAck
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeSert
</UL>

<P><STRONG><a name="[47f]"></a>sfud_chip_erase</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, sfud.o(i.sfud_chip_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[463]"></a>sfud_device_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sfud.o(i.sfud_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = sfud_device_init &rArr; hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe_ex
</UL>

<P><STRONG><a name="[3c2]"></a>sfud_erase</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, sfud.o(i.sfud_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_sfdp_get_suitable_eraser
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_control
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[464]"></a>sfud_erase_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sfud.o(i.sfud_erase_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_write
</UL>

<P><STRONG><a name="[419]"></a>sfud_read</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, sfud.o(i.sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = sfud_read &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_read
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[3f4]"></a>sfud_read_sfdp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sfud_sfdp.o(i.sfud_read_sfdp))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = sfud_read_sfdp &rArr; read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[47d]"></a>sfud_read_status</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, sfud.o(i.sfud_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>

<P><STRONG><a name="[481]"></a>sfud_sfdp_get_suitable_eraser</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sfud_sfdp.o(i.sfud_sfdp_get_suitable_eraser))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sfud_sfdp_get_suitable_eraser
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>

<P><STRONG><a name="[3f2]"></a>sfud_spi_port_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.sfud_spi_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sfud_spi_port_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[47e]"></a>sfud_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sfud.o(i.sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[3f6]"></a>sfud_write_status</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sfud.o(i.sfud_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = sfud_write_status &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[43b]"></a>show_Notcalculated</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, read_nuid.o(i.show_Notcalculated))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = show_Notcalculated &rArr; mq_service_card_send_disp &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
</UL>

<P><STRONG><a name="[229]"></a>simulation_Print</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dwinprotocol.o(i.simulation_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = simulation_Print &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent25
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent1
</UL>

<P><STRONG><a name="[41e]"></a>slotcard_state</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, read_nuid.o(i.slotcard_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = slotcard_state &rArr; Unlock_settlement &rArr; app_read_nuid &rArr; PICC_ReadCardSerial &rArr; PICC_Select &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_judge_rete_info
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[482]"></a>spi_byte_read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, w25qxx.o(i.spi_byte_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_byte_read &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_sr1
</UL>

<P><STRONG><a name="[483]"></a>spi_byte_write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, w25qxx.o(i.spi_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_transmitter_enable
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_dma_receiver_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_sr1
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_read
</UL>

<P><STRONG><a name="[489]"></a>spi_bytes_read</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, w25qxx.o(i.spi_bytes_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_bytes_read
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
</UL>

<P><STRONG><a name="[48a]"></a>spi_bytes_write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, w25qxx.o(i.spi_bytes_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_bytes_write
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
</UL>

<P><STRONG><a name="[392]"></a>spi_crc_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_spi.o(i.spi_crc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[48d]"></a>spi_default_para_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f403a_407_spi.o(i.spi_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
</UL>

<P><STRONG><a name="[391]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[488]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f403a_407_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_write
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_read
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>

<P><STRONG><a name="[486]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f403a_407_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_write
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_read
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>

<P><STRONG><a name="[485]"></a>spi_i2s_dma_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_spi.o(i.spi_i2s_dma_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>

<P><STRONG><a name="[484]"></a>spi_i2s_dma_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_spi.o(i.spi_i2s_dma_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>

<P><STRONG><a name="[487]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f403a_407_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_write
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_read
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>

<P><STRONG><a name="[31c]"></a>spi_i2s_reset</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, at32f403a_407_spi.o(i.spi_i2s_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_i2s_reset &rArr; crm_periph_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
</UL>

<P><STRONG><a name="[390]"></a>spi_init</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, at32f403a_407_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[38d]"></a>spiflash_init</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, w25qxx.o(i.spiflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = spiflash_init &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
</UL>

<P><STRONG><a name="[48e]"></a>spiflash_page_write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, w25qxx.o(i.spiflash_page_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spiflash_page_write &rArr; spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_read &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wait_busy
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_write
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_nocheck
</UL>

<P><STRONG><a name="[3cd]"></a>spiflash_read</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, w25qxx.o(i.spiflash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_bytes_read
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>

<P><STRONG><a name="[492]"></a>spiflash_read_sr1</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, w25qxx.o(i.spiflash_read_sr1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spiflash_read_sr1 &rArr; spi_byte_read &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wait_busy
</UL>

<P><STRONG><a name="[493]"></a>spiflash_sector_erase</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, w25qxx.o(i.spiflash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spiflash_sector_erase &rArr; spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_read &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_enable
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_wait_busy
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
</UL>

<P><STRONG><a name="[491]"></a>spiflash_wait_busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w25qxx.o(i.spiflash_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_read &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read_sr1
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
</UL>

<P><STRONG><a name="[3ce]"></a>spiflash_write</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, w25qxx.o(i.spiflash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_read
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write_nocheck
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>

<P><STRONG><a name="[48f]"></a>spiflash_write_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, w25qxx.o(i.spiflash_write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spiflash_write_enable &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_sector_erase
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
</UL>

<P><STRONG><a name="[494]"></a>spiflash_write_nocheck</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, w25qxx.o(i.spiflash_write_nocheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spiflash_write_nocheck &rArr; spiflash_page_write &rArr; spiflash_wait_busy &rArr; spiflash_read_sr1 &rArr; spi_byte_read &rArr; spi_byte_write
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_page_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_write
</UL>

<P><STRONG><a name="[2c9]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[41f]"></a>start_change_card</STRONG> (Thumb, 694 bytes, Stack size 16 bytes, read_nuid.o(i.start_change_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = start_change_card &rArr; startchargUnlock &rArr; writer_lock_state &rArr; read_lock_state &rArr; MIFARE_Read &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreRecodeCurNum
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_CardMCUID
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[496]"></a>startchargUnlock</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, read_nuid.o(i.startchargUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = startchargUnlock &rArr; writer_lock_state &rArr; read_lock_state &rArr; MIFARE_Read &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlementrecord
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Transactionrecord
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recordqueryinfo_WR
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_card_money
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
</UL>

<P><STRONG><a name="[420]"></a>stop_change_card</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, read_nuid.o(i.stop_change_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = stop_change_card &rArr; app_read_nuid &rArr; PICC_ReadCardSerial &rArr; PICC_Select &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_card_send_disp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlementrecord
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writer_lock_state
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_card_money
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_type
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_money
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_nuid
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_card_task
</UL>

<P><STRONG><a name="[43f]"></a>system_clock_config</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, board.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = system_clock_config &rArr; system_core_clock_update
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_clock_div_set
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_auto_step_mode_enable
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[49f]"></a>system_core_clock_update</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, system_at32f403a_407.o(i.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = system_core_clock_update
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[44b]"></a>systick_clock_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f403a_407_misc.o(i.systick_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_systick_init
</UL>

<P><STRONG><a name="[23c]"></a>time</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, time.o(i.time))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timeval
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreHYBill
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendDevStateA
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_from_ctl_msg
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_q_money
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_start_func
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_end_condition
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;date
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timing_charging
</UL>

<P><STRONG><a name="[40b]"></a>timegm</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, time.o(i.timegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timegm
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[395]"></a>timer1_pwm_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cp.o(i.timer1_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = timer1_pwm_init &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_init
</UL>

<P><STRONG><a name="[355]"></a>tmr_base_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_base_init))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[3b2]"></a>tmr_channel_enable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, at32f403a_407_tmr.o(i.tmr_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>

<P><STRONG><a name="[3b8]"></a>tmr_channel_value_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_channel_value_set))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[356]"></a>tmr_clock_source_div_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_clock_source_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[358]"></a>tmr_cnt_dir_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_cnt_dir_set))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
</UL>

<P><STRONG><a name="[35d]"></a>tmr_counter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_counter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_start
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>

<P><STRONG><a name="[350]"></a>tmr_counter_value_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_counter_value_get))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_counter_get
</UL>

<P><STRONG><a name="[35a]"></a>tmr_counter_value_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_counter_value_set))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_start
</UL>

<P><STRONG><a name="[353]"></a>tmr_div_value_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_div_value_set))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_ctrl
</UL>

<P><STRONG><a name="[354]"></a>tmr_event_sw_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_event_sw_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_ctrl
</UL>

<P><STRONG><a name="[293]"></a>tmr_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
</UL>

<P><STRONG><a name="[291]"></a>tmr_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[359]"></a>tmr_interrupt_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
</UL>

<P><STRONG><a name="[35c]"></a>tmr_one_cycle_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_one_cycle_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_start
</UL>

<P><STRONG><a name="[3b7]"></a>tmr_output_channel_buffer_enable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, at32f403a_407_tmr.o(i.tmr_output_channel_buffer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tmr_output_channel_buffer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[3b6]"></a>tmr_output_channel_config</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, at32f403a_407_tmr.o(i.tmr_output_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tmr_output_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[3b5]"></a>tmr_output_default_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_output_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[3ba]"></a>tmr_output_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_output_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[3b9]"></a>tmr_period_buffer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_period_buffer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
</UL>

<P><STRONG><a name="[35b]"></a>tmr_period_value_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_period_value_set))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_start
</UL>

<P><STRONG><a name="[357]"></a>tmr_repetition_counter_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f403a_407_tmr.o(i.tmr_repetition_counter_set))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
</UL>

<P><STRONG><a name="[405]"></a>tz_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, time.o(i.tz_get))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>

<P><STRONG><a name="[3ec]"></a>tz_is_dst</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time.o(i.tz_is_dst))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[d0]"></a>uart1_handler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dlt645_port.o(i.uart1_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = uart1_handler &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlt645_port.o(i.dlt645_port_init)
</UL>
<P><STRONG><a name="[d8]"></a>uart2_handler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, 4grecv.o(i.uart2_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = uart2_handler &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 4grecv.o(i.hy4g_port_init)
</UL>
<P><STRONG><a name="[d4]"></a>uart4_handler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dwin_com_pro.o(i.uart4_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = uart4_handler &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(i.dwin_port_init)
</UL>
<P><STRONG><a name="[343]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f403a_407_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_getc
</UL>

<P><STRONG><a name="[34f]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f403a_407_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_putc
</UL>

<P><STRONG><a name="[332]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[4a0]"></a>usart_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f403a_407_usart.o(i.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
</UL>

<P><STRONG><a name="[342]"></a>usart_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f403a_407_usart.o(i.usart_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_isr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_putc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_getc
</UL>

<P><STRONG><a name="[32f]"></a>usart_hardware_flow_control_set</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, at32f403a_407_usart.o(i.usart_hardware_flow_control_set))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[331]"></a>usart_init</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, at32f403a_407_usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[334]"></a>usart_interrupt_enable</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, at32f403a_407_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_control
</UL>

<P><STRONG><a name="[330]"></a>usart_parity_selection_config</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, at32f403a_407_usart.o(i.usart_parity_selection_config))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[32d]"></a>usart_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_usart.o(i.usart_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[32e]"></a>usart_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_usart.o(i.usart_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_configure
</UL>

<P><STRONG><a name="[16b]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[4a1]"></a>wdt_counter_reload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_wdt.o(i.wdt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[4a3]"></a>wdt_divider_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f403a_407_wdt.o(i.wdt_divider_set))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[4a5]"></a>wdt_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f403a_407_wdt.o(i.wdt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[4a2]"></a>wdt_register_write_enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f403a_407_wdt.o(i.wdt_register_write_enable))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[4a4]"></a>wdt_reload_value_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f403a_407_wdt.o(i.wdt_reload_value_set))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_control
</UL>

<P><STRONG><a name="[2b9]"></a>writer_lock_state</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, read_nuid.o(i.writer_lock_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = writer_lock_state &rArr; read_lock_state &rArr; MIFARE_Read &rArr; PCD_TransceiveData &rArr; PCD_CommunicateWithPICC &rArr; PCD_ReadRegister &rArr; mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_state
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Authenticate
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIFARE_Write
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatusCodeName
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_change_card
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startchargUnlock
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_change_card
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_settlement
</UL>

<P><STRONG><a name="[c5]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[2c6]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4f9]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4fa]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4fb]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4fc]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[4fd]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[21b]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_data_parse_by_format_to_float
</UL>

<P><STRONG><a name="[4a6]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2d0]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_package_translate_to_int
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4a9]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[4ac]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[4b2]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[2c8]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_data_parse_by_format_to_float
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4ae]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[39c]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_package_translate_to_int
</UL>

<P><STRONG><a name="[4af]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[374]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
</UL>

<P><STRONG><a name="[4b0]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2cb]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_package_translate_to_int
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_data_parse_by_format_to_float
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4fe]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[373]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_package_translate_to_int
</UL>

<P><STRONG><a name="[4ff]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[37c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
</UL>

<P><STRONG><a name="[4b1]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[4b5]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[21a]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_volt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_package_translate_to_int
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4b3]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4a8]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[4ab]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2d2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_low_current
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4b4]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2cf]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4b6]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[495]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[2ce]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4b8]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HLW8112_Measure
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;electricity_err
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_under_volt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_volt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_over_current
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_is_low_current
</UL>

<P><STRONG><a name="[4b9]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[4ba]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[17f]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[500]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[501]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4a7]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[4ad]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[2d3]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4bb]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[153]"></a>_4G_recv_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, 4grecv.o(i._4G_recv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _4G_recv_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 4grecv.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[7]"></a>hy_hw_read</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, 4grecv.o(i.hy_hw_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = hy_hw_read &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 4grecv.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>hy_hw_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, 4grecv.o(i.hy_hw_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hy_hw_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 4grecv.o(.data)
</UL>
<P><STRONG><a name="[252]"></a>Module_ConnectServer</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, modulea7680c.o(i.Module_ConnectServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = Module_ConnectServer &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
</UL>

<P><STRONG><a name="[10c]"></a>Recv_AT_CGDCONT_Ack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_CGDCONT_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_AT_CGDCONT_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>Recv_AT_CIMI_Ack</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_CIMI_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_AT_CIMI_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>Recv_AT_CIPMODE_Ack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_CIPMODE_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_AT_CIPMODE_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>Recv_AT_CSQ_Ack</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_CSQ_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_AT_CSQ_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>Recv_AT_ConnectServer0Cmd_Ack</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ConnectServer0Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Recv_AT_ConnectServer0Cmd_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>Recv_AT_ConnectServer0_Ack</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ConnectServer0_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Recv_AT_ConnectServer0_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>Recv_AT_ConnectServer1Cmd_Ack</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ConnectServer1Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Recv_AT_ConnectServer1Cmd_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>Recv_AT_ConnectServer1_Ack</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ConnectServer1_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Recv_AT_ConnectServer1_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>Recv_AT_EnterATCmd_Ack</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_EnterATCmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = Recv_AT_EnterATCmd_Ack &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>Recv_AT_NETOPEN_Ack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_NETOPEN_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_AT_NETOPEN_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>Recv_AT_ReRecv0Cmd_Ack</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ReRecv0Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Recv_AT_ReRecv0Cmd_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>Recv_AT_ReRecv1Cmd_Ack</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_AT_ReRecv1Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Recv_AT_ReRecv1Cmd_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>Recv_AT_SendAck0Cmd_Ack</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_SendAck0Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_AT_SendAck0Cmd_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>Recv_AT_SendAck1Cmd_Ack</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_SendAck1Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_AT_SendAck1Cmd_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>Recv_AT_SetReAct_Ack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_AT_SetReAct_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_AT_SetReAct_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>Recv_ActRecv0_Ack</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_ActRecv0_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = Recv_ActRecv0_Ack &rArr; Send_AT_CIPRXGET &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>Recv_ActRecv1_Ack</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_ActRecv1_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = Recv_ActRecv1_Ack &rArr; Send_AT_CIPRXGET &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>Recv_HttpConect_Ack</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_HttpConect_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_HttpConect_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>Recv_HttpGet_Ack</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, modulea7680c.o(i.Recv_HttpGet_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Recv_HttpGet_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>Recv_HttpStart_Ack</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_HttpStart_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_HttpStart_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>Recv_ReadData_Ack</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, modulea7680c.o(i.Recv_ReadData_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Recv_ReadData_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>Recv_ReadDone_Ack</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, modulea7680c.o(i.Recv_ReadDone_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Recv_ReadDone_Ack &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulea7680c.o(.constdata)
</UL>
<P><STRONG><a name="[262]"></a>Send_AT_CGDCONT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_CGDCONT))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_CGDCONT &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[260]"></a>Send_AT_CIMI</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_CIMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_CIMI &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[28a]"></a>Send_AT_CIPCLOSE</STRONG> (Thumb, 82 bytes, Stack size 80 bytes, modulea7680c.o(i.Send_AT_CIPCLOSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIPCLOSE &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CloseNet
</UL>

<P><STRONG><a name="[253]"></a>Send_AT_CIPSEND</STRONG> (Thumb, 82 bytes, Stack size 88 bytes, modulea7680c.o(i.Send_AT_CIPSEND))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
</UL>

<P><STRONG><a name="[259]"></a>Send_AT_EnterATCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_EnterATCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_EnterATCmd &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[25d]"></a>Send_AT_GET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_GET))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_GET &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[25b]"></a>Send_AT_HTTPINIT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_HTTPINIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_HTTPINIT &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[25c]"></a>Send_AT_HTTPPAR</STRONG> (Thumb, 74 bytes, Stack size 120 bytes, modulea7680c.o(i.Send_AT_HTTPPAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = Send_AT_HTTPPAR &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[25a]"></a>Send_AT_HTTPTERM</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_HTTPTERM))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_HTTPTERM &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[28b]"></a>Send_AT_NETCLOSE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_NETCLOSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_NETCLOSE &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
</UL>

<P><STRONG><a name="[251]"></a>Send_AT_NETOPEN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_NETOPEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_NETOPEN &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
</UL>

<P><STRONG><a name="[264]"></a>Send_AT_NOTCIPMODE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_NOTCIPMODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_NOTCIPMODE &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[25f]"></a>Send_AT_READ</STRONG> (Thumb, 74 bytes, Stack size 80 bytes, modulea7680c.o(i.Send_AT_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = Send_AT_READ &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_HTTPDownload
</UL>

<P><STRONG><a name="[265]"></a>Send_AT_SetCIPRXGET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulea7680c.o(i.Send_AT_SetCIPRXGET))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Send_AT_SetCIPRXGET &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[1f3]"></a>Connect_4G</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, 4gmain.o(i.Connect_4G))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = Connect_4G &rArr; ModuleSIM7600_ConnectServer &rArr; Module_ConnectServer &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CloseNet
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Status
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
</UL>

<P><STRONG><a name="[154]"></a>_4G_main_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, 4gmain.o(i._4G_main_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _4G_main_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 4gmain.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[16]"></a>HY_RecvCardStart</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvCardStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HY_RecvCardStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>HY_RecvDevFailAck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hyframe.o(i.HY_RecvDevFailAck))
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HY_RecvDevInfoAck</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvDevInfoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = HY_RecvDevInfoAck &rArr; mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>HY_RecvDevStopAck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hyframe.o(i.HY_RecvDevStopAck))
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HY_RecvHearAck</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvHearAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 980 + Unknown Stack Size
<LI>Call Chain = HY_RecvHearAck &rArr; HY_SendUpdataAck &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetSIM7600Mode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HY_SendUpdataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>HY_RecvQueryBill</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvQueryBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = HY_RecvQueryBill &rArr; mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>HY_RecvQueryRate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvQueryRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = HY_RecvQueryRate &rArr; mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>HY_RecvRateSet</STRONG> (Thumb, 410 bytes, Stack size 120 bytes, hyframe.o(i.HY_RecvRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 548 + Unknown Stack Size
<LI>Call Chain = HY_RecvRateSet &rArr; mq_service_send_to_4gsend &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>HY_RecvRecordAck</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvRecordAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = HY_RecvRecordAck &rArr; WriterFmBill &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>HY_RecvRegisterAck</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, hyframe.o(i.HY_RecvRegisterAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = HY_RecvRegisterAck &rArr; set_time &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetAppRegisterState
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFmBill
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoHEX
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HY_RecvStartCharge</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvStartCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = HY_RecvStartCharge &rArr; send_ch_ctl_msg &rArr; mq_service_xxx_send_msg_to_chtask &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetStartNetState
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HY_RecvStopCharge</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hyframe.o(i.HY_RecvStopCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = HY_RecvStopCharge &rArr; send_ch_ctl_msg &rArr; mq_service_xxx_send_msg_to_chtask &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_ctl_msg
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_send_to_4gsend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>HY_RecvUpdata</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, hyframe.o(i.HY_RecvUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HY_RecvUpdata &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>HY_SendHear</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hyframe.o(i.HY_SendHear))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = HY_SendHear &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>HY_SendRegister</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hyframe.o(i.HY_SendRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = HY_SendRegister &rArr; HYFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hyframe.o(.data)
</UL>
<P><STRONG><a name="[226]"></a>get_crc_Data</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hyframe.o(i.get_crc_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_crc_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYFreamSend
</UL>

<P><STRONG><a name="[155]"></a>_4G_send_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, 4gsend.o(i._4G_send_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = _4G_send_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 4gsend.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[3fb]"></a>is_input_io_fault_resume</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, ch_in_io.o(i.is_input_io_fault_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_input_io_fault_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_io_period_check
</UL>

<P><STRONG><a name="[3fa]"></a>is_set_input_io_fault</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ch_in_io.o(i.is_set_input_io_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_set_input_io_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_io_period_check
</UL>

<P><STRONG><a name="[396]"></a>hwtimer_sample</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, cp.o(i.hwtimer_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = hwtimer_sample &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cp_pwm_init
</UL>

<P><STRONG><a name="[d7]"></a>timeout_cb</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, cp.o(i.timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timeout_cb &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_read
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cp.o(i.hwtimer_sample)
</UL>
<P><STRONG><a name="[370]"></a>ch_from_ctl_msg</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, chtask.o(i.ch_from_ctl_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ch_from_ctl_msg &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_ch_send_dip
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_tcu_msg_proc
</UL>

<P><STRONG><a name="[384]"></a>ch_msg_proc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, chtask.o(i.ch_msg_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = ch_msg_proc &rArr; ch_task_tcu_msg_proc &rArr; ch_from_ctl_msg &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_tcu_msg_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_msg
</UL>

<P><STRONG><a name="[cf]"></a>ch_thread_entry</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, chtask.o(i.ch_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = ch_thread_entry &rArr; ch_loop_proc &rArr; ch_insert_proc &rArr; mode5 &rArr; APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Mode
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_task_cycle_proc
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_get_cp_state_info
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_wait_msg
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_loop_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chtask.o(i.ch_thread_init)
</UL>
<P><STRONG><a name="[156]"></a>ch_thread_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, chtask.o(i.ch_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ch_thread_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chtask.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[38e]"></a>ch_wait_msg</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, chtask.o(i.ch_wait_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = ch_wait_msg &rArr; ch_msg_proc &rArr; ch_task_tcu_msg_proc &rArr; ch_from_ctl_msg &rArr; mq_service_ch_send_dip &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_msg_proc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_recv_msg
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_thread_entry
</UL>

<P><STRONG><a name="[3eb]"></a>__isleap</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, time.o(i.__isleap))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gmtime_r
</UL>

<P><STRONG><a name="[3e9]"></a>get_timeval</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, time.o(i.get_timeval))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[321]"></a>num2str</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, time.o(i.num2str))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime_r
</UL>

<P><STRONG><a name="[35e]"></a>bus_fault_track</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, cpuport.o(i.bus_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[3ee]"></a>hard_fault_track</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cpuport.o(i.hard_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = hard_fault_track &rArr; usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[3ef]"></a>mem_manage_fault_track</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cpuport.o(i.mem_manage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[3f0]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(i.usage_fault_track))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[427]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[ea]"></a>_adc_control</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, adc.o(i._adc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _adc_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.rt_hw_adc_register)
</UL>
<P><STRONG><a name="[e9]"></a>_adc_read</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, adc.o(i._adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _adc_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(i.rt_hw_adc_register)
</UL>
<P><STRONG><a name="[15e]"></a>adc</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, adc.o(i.adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = adc &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_read
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_enable
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_adc_disable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc.o(FSymTab)
</UL>
<P><STRONG><a name="[e8]"></a>_pwm_control</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rt_drv_pwm.o(i._pwm_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _pwm_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(i.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[e6]"></a>_pwm_read</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, rt_drv_pwm.o(i._pwm_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pwm_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(i.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[e7]"></a>_pwm_write</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, rt_drv_pwm.o(i._pwm_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pwm_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(i.rt_device_pwm_register)
</UL>
<P><STRONG><a name="[160]"></a>pwm_disable</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rt_drv_pwm.o(i.pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = pwm_disable &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_disable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[15f]"></a>pwm_enable</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rt_drv_pwm.o(i.pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = pwm_enable &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_enable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[162]"></a>pwm_get</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, rt_drv_pwm.o(i.pwm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = pwm_get &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_get
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[161]"></a>pwm_set</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, rt_drv_pwm.o(i.pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = pwm_set &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pwm_set
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_drv_pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[e5]"></a>_pin_control</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pin.o(i._pin_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _pin_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[e3]"></a>_pin_read</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(i._pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[e4]"></a>_pin_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, pin.o(i._pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pin_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pin.o(i.rt_device_pin_register)
</UL>
<P><STRONG><a name="[163]"></a>date</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, rtc.o(i.date))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = date &rArr; set_time &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(FSymTab)
</UL>
<P><STRONG><a name="[ed]"></a>rt_rtc_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.rt_rtc_close))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.rt_hw_rtc_register)
</UL>
<P><STRONG><a name="[ee]"></a>rt_rtc_control</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, rtc.o(i.rt_rtc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_rtc_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.rt_hw_rtc_register)
</UL>
<P><STRONG><a name="[eb]"></a>rt_rtc_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtc.o(i.rt_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_rtc_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.rt_hw_rtc_register)
</UL>
<P><STRONG><a name="[ec]"></a>rt_rtc_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(i.rt_rtc_open))
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.rt_hw_rtc_register)
</UL>
<P><STRONG><a name="[2f3]"></a>_serial_check_buffer_size</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial.o(i._serial_check_buffer_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _serial_check_buffer_size &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[2f4]"></a>_serial_int_rx</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[2f5]"></a>_serial_int_tx</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[2f7]"></a>_serial_poll_rx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial.o(i._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[2f8]"></a>_serial_poll_tx</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial.o(i._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[f1]"></a>rt_serial_close</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[f4]"></a>rt_serial_control</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[ef]"></a>rt_serial_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[f0]"></a>rt_serial_open</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_serial_open &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[f2]"></a>rt_serial_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_serial_read &rArr; _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[f3]"></a>rt_serial_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_serial_write &rArr; _serial_int_tx &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[30f]"></a>aai_write</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, sfud.o(i.aai_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>

<P><STRONG><a name="[3f1]"></a>hardware_init</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, sfud.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = hardware_init &rArr; sfud_read_sfdp &rArr; read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_spi_port_init
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_jedec_id
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[312]"></a>make_adress_byte_array</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, sfud.o(i.make_adress_byte_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[310]"></a>page256_or_1_byte_write</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, sfud.o(i.page256_or_1_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_adress_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[3f3]"></a>read_jedec_id</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, sfud.o(i.read_jedec_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = read_jedec_id &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f5]"></a>reset</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sfud.o(i.reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = reset &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[3f7]"></a>set_4_byte_address_mode</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sfud.o(i.set_4_byte_address_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = set_4_byte_address_mode &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_write_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[311]"></a>set_write_enabled</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sfud.o(i.set_write_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_4_byte_address_mode
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[480]"></a>software_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sfud.o(i.software_init))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_device_init
</UL>

<P><STRONG><a name="[313]"></a>wait_busy</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sfud.o(i.wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_chip_erase
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page256_or_1_byte_write
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aai_write
</UL>

<P><STRONG><a name="[109]"></a>retry_delay_100us</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_flash_sfud.o(i.retry_delay_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = retry_delay_100us &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[fd]"></a>rt_sfud_control</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, spi_flash_sfud.o(i.rt_sfud_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_sfud_control &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[fb]"></a>rt_sfud_read</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = rt_sfud_read &rArr; sfud_read &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[fc]"></a>rt_sfud_write</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, spi_flash_sfud.o(i.rt_sfud_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = rt_sfud_write &rArr; sfud_erase_write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.rt_sfud_flash_probe_ex)
</UL>
<P><STRONG><a name="[164]"></a>sf</STRONG> (Thumb, 2010 bytes, Stack size 96 bytes, spi_flash_sfud.o(i.sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = sf &rArr; rt_sfud_flash_probe &rArr; rt_sfud_flash_probe_ex &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_probe
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_delete
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write_status
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_status
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(FSymTab)
</UL>
<P><STRONG><a name="[107]"></a>spi_lock</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.spi_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = spi_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[108]"></a>spi_unlock</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, spi_flash_sfud.o(i.spi_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = spi_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[106]"></a>spi_write_read</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, spi_flash_sfud.o(i.spi_write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = spi_write_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_flash_sfud.o(i.sfud_spi_port_init)
</UL>
<P><STRONG><a name="[41a]"></a>read_basic_header</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, sfud_sfdp.o(i.read_basic_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = read_basic_header &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[41c]"></a>read_basic_table</STRONG> (Thumb, 618 bytes, Stack size 72 bytes, sfud_sfdp.o(i.read_basic_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = read_basic_table &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[41b]"></a>read_sfdp_data</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sfud_sfdp.o(i.read_sfdp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_header
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_table
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_basic_header
</UL>

<P><STRONG><a name="[421]"></a>read_sfdp_header</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, sfud_sfdp.o(i.read_sfdp_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = read_sfdp_header &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sfdp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read_sfdp
</UL>

<P><STRONG><a name="[100]"></a>_spi_bus_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spi_bus_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[fe]"></a>_spi_bus_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[ff]"></a>_spi_bus_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spi_bus_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spi_bus_device_init)
</UL>
<P><STRONG><a name="[103]"></a>_spidev_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(i._spidev_device_control))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[101]"></a>_spidev_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spidev_device_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[102]"></a>_spidev_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(i._spidev_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(i.rt_spidev_device_init)
</UL>
<P><STRONG><a name="[f7]"></a>rt_watchdog_close</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, watchdog.o(i.rt_watchdog_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_watchdog_close &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[f8]"></a>rt_watchdog_control</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, watchdog.o(i.rt_watchdog_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_watchdog_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[f5]"></a>rt_watchdog_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, watchdog.o(i.rt_watchdog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_watchdog_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[f6]"></a>rt_watchdog_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, watchdog.o(i.rt_watchdog_open))
<BR>[Address Reference Count : 1]<UL><LI> watchdog.o(i.rt_hw_watchdog_register)
</UL>
<P><STRONG><a name="[19]"></a>dlt645_hw_read</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dlt645_port.o(i.dlt645_hw_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dlt645_hw_read &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlt645_port.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>dlt645_hw_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dlt645_port.o(i.dlt645_hw_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dlt645_hw_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dlt645_port.o(.data)
</UL>
<P><STRONG><a name="[39d]"></a>dlt645_1997_parsing_data</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, dlt645_1997.o(i.dlt645_1997_parsing_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dlt645_1997_parsing_data &rArr; dlt645_data_parse_by_format_to_float &rArr; data_package_translate_to_int &rArr; __hardfp_pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_data_parse_by_format_to_float
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlt645_1997_read_data
</UL>

<P><STRONG><a name="[123]"></a>at32_pin_attach_irq</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, drv_gpio.o(i.at32_pin_attach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_pin_attach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>at32_pin_dettach_irq</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, drv_gpio.o(i.at32_pin_dettach_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at32_pin_dettach_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>at32_pin_irq_enable</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, drv_gpio.o(i.at32_pin_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at32_pin_irq_enable &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_line_config
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exint_default_para_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit2bitno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>at32_pin_mode</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, drv_gpio.o(i.at32_pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = at32_pin_mode &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>at32_pin_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, drv_gpio.o(i.at32_pin_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at32_pin_read
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>at32_pin_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_gpio.o(i.at32_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = at32_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(.constdata)
</UL>
<P><STRONG><a name="[349]"></a>bit2bitno</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_gpio.o(i.bit2bitno))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exint_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_irq_enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_dettach_irq
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_pin_attach_irq
</UL>

<P><STRONG><a name="[1a]"></a>configure</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, drv_spi.o(i.configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = configure &rArr; at32_msp_spi_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_spi_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_crc_enable
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>xfer</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, drv_spi.o(i.xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xfer &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_set
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bits_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_spi.o(.data)
</UL>
<P><STRONG><a name="[126]"></a>at32_adc_enabled</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, drv_adc.o(i.at32_adc_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = at32_adc_enabled &rArr; at32_msp_adc_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_adc_init
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_conversion_trigger_set
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_combine_mode_select
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_status_get
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_start
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_init_status_get
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_init
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_default_para_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>at32_get_adc_value</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, drv_adc.o(i.at32_get_adc_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at32_get_adc_value &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_software_trigger_enable
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_conversion_data_get
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_channel_set
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>rt_hw_adc_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, drv_adc.o(i.rt_hw_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_hw_adc_init &rArr; rt_hw_adc_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_adc_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[129]"></a>_rtc_get_secs</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_rtc.o(i._rtc_get_secs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _rtc_get_secs &rArr; get_rtc_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rtc_timestamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>_rtc_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, drv_rtc.o(i._rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _rtc_init &rArr; rt_rtc_config &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwc_battery_powered_domain_access
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rtc_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>_rtc_set_secs</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_rtc.o(i._rtc_set_secs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _rtc_set_secs &rArr; set_rtc_time_stamp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rtc_time_stamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtc.o(.constdata)
</UL>
<P><STRONG><a name="[2ea]"></a>get_rtc_timestamp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_rtc.o(i.get_rtc_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_rtc_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_get_secs
</UL>

<P><STRONG><a name="[2ef]"></a>rt_rtc_config</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, drv_rtc.o(i.rt_rtc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_rtc_config &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_update_finish
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_config_finish
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_divider_set
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwc_battery_powered_domain_access
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_rtc_clock_select
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_rtc_clock_enable
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpr_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_init
</UL>

<P><STRONG><a name="[2f0]"></a>set_rtc_time_stamp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_rtc.o(i.set_rtc_time_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_rtc_time_stamp
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_wait_config_finish
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_counter_set
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bpr_data_write
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtc_set_secs
</UL>

<P><STRONG><a name="[fa]"></a>wdt_control</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, drv_wdt.o(i.wdt_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = wdt_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reload_value_set
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_register_write_enable
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_divider_set
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_counter_reload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(i.rt_hw_wdt_init)
</UL>
<P><STRONG><a name="[f9]"></a>wdt_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_wdt.o(i.wdt_init))
<BR>[Address Reference Count : 1]<UL><LI> drv_wdt.o(i.rt_hw_wdt_init)
</UL>
<P><STRONG><a name="[1c]"></a>drv_pwm_control</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, drv_pwm.o(i.drv_pwm_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drv_pwm_control &rArr; drv_pwm_set &rArr; tmr_pclk_get &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.data)
</UL>
<P><STRONG><a name="[3af]"></a>drv_pwm_enable</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, drv_pwm.o(i.drv_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_pwm_enable &rArr; tmr_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_enable
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[3b1]"></a>drv_pwm_get</STRONG> (Thumb, 310 bytes, Stack size 80 bytes, drv_pwm.o(i.drv_pwm_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = drv_pwm_get &rArr; tmr_pclk_get &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pclk_get
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[3b0]"></a>drv_pwm_set</STRONG> (Thumb, 350 bytes, Stack size 96 bytes, drv_pwm.o(i.drv_pwm_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = drv_pwm_set &rArr; tmr_pclk_get &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_tmr_init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_period_buffer_enable
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_enable
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_default_para_init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_config
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_buffer_enable
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_clock_source_div_set
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_channel_value_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_base_init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pclk_get
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_control
</UL>

<P><STRONG><a name="[445]"></a>pwm_get_channel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_pwm.o(i.pwm_get_channel))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_pwm_init
</UL>

<P><STRONG><a name="[14e]"></a>rt_hw_pwm_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, drv_pwm.o(i.rt_hw_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_hw_pwm_init &rArr; rt_device_pwm_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_pwm_register
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_get_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_pwm.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[3b3]"></a>tmr_pclk_get</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, drv_pwm.o(i.tmr_pclk_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tmr_pclk_get &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_set
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pwm_get
</UL>

<P><STRONG><a name="[12d]"></a>fal_flash_erase</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_flash.o(i.fal_flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fal_flash_erase &rArr; at32_flash_erase &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>fal_flash_read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_flash.o(i.fal_flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fal_flash_read &rArr; at32_flash_read &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>fal_flash_write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, drv_flash.o(i.fal_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fal_flash_write &rArr; at32_flash_write &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_flash.o(.constdata)
</UL>
<P><STRONG><a name="[338]"></a>get_page</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_flash.o(i.get_page))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_flash_erase
</UL>

<P><STRONG><a name="[12e]"></a>at32_configure</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, drv_usart.o(i.at32_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at32_configure &rArr; usart_init &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_usart_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_selection_config
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_control_set
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>at32_control</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, drv_usart.o(i.at32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = at32_control &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>at32_getc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_usart.o(i.at32_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>at32_putc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_usart.o(i.at32_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usart.o(.constdata)
</UL>
<P><STRONG><a name="[2ae]"></a>usart_isr</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, drv_usart.o(i.usart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = usart_isr &rArr; rt_hw_serial_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>reboot</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, drv_common.o(i.reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reboot
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_common.o(FSymTab)
</UL>
<P><STRONG><a name="[135]"></a>at32_timer_counter_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_hwtimer.o(i.at32_timer_counter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_timer_counter_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_value_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>at32_timer_ctrl</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, drv_hwtimer.o(i.at32_timer_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = at32_timer_ctrl &rArr; tmr_pclk_get &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_event_sw_trigger
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_div_value_set
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pclk_get
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>at32_timer_init</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, drv_hwtimer.o(i.at32_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = at32_timer_init &rArr; tmr_pclk_get &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_msp_hwtmr_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_repetition_counter_set
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_interrupt_enable
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_flag_clear
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cnt_dir_set
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_pclk_get
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_clock_source_div_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_base_init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>at32_timer_start</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, drv_hwtimer.o(i.at32_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at32_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_period_value_set
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_one_cycle_mode_enable
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_value_set
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>at32_timer_stop</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_hwtimer.o(i.at32_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at32_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_value_set
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>rt_hw_hwtimer_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, drv_hwtimer.o(i.rt_hw_hwtimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = rt_hw_hwtimer_init &rArr; rt_device_hwtimer_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_hwtimer_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_hwtimer.o(.rti_fn.1)
</UL>
<P><STRONG><a name="[351]"></a>tmr_pclk_get</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, drv_hwtimer.o(i.tmr_pclk_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tmr_pclk_get &rArr; crm_clocks_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at32_timer_ctrl
</UL>

<P><STRONG><a name="[df]"></a>rt_hwtimer_close</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hwtimer.o(i.rt_hwtimer_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hwtimer_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[e2]"></a>rt_hwtimer_control</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, hwtimer.o(i.rt_hwtimer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_hwtimer_control &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[dd]"></a>rt_hwtimer_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hwtimer.o(i.rt_hwtimer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hwtimer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[de]"></a>rt_hwtimer_open</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hwtimer.o(i.rt_hwtimer_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_hwtimer_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[e0]"></a>rt_hwtimer_read</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, hwtimer.o(i.rt_hwtimer_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_hwtimer_read &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[e1]"></a>rt_hwtimer_write</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, hwtimer.o(i.rt_hwtimer_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hwtimer_write &rArr; timeout_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_calc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwtimer.o(i.rt_device_hwtimer_register)
</UL>
<P><STRONG><a name="[44d]"></a>timeout_calc</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, hwtimer.o(i.timeout_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hwtimer_write
</UL>

<P><STRONG><a name="[207]"></a>Dwin_FrameHead</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dwinprotocol.o(i.Dwin_FrameHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Dwin_FrameHead &rArr; LCD_SendTwoBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>

<P><STRONG><a name="[247]"></a>LCD_SendBufLenClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dwinprotocol.o(i.LCD_SendBufLenClear))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
</UL>

<P><STRONG><a name="[208]"></a>LCD_SendByteToBuf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dwinprotocol.o(i.LCD_SendByteToBuf))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>

<P><STRONG><a name="[246]"></a>LCD_SendFourBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendFourBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_SendFourBytes &rArr; LCD_SendTwoBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
</UL>

<P><STRONG><a name="[20a]"></a>LCD_SendToUart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendToUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendBufLenClear
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>

<P><STRONG><a name="[209]"></a>LCD_SendTwoBytes</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendTwoBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SendTwoBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simulation_Print
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendFourBytes
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>

<P><STRONG><a name="[142]"></a>Amount_charging</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Amount_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Amount_charging &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>Company_code</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Company_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = Company_code &rArr; Munu13_ShowSysInfo &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>DealWithVari</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dwin_com_pro.o(i.DealWithVari))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DealWithVari
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
</UL>

<P><STRONG><a name="[1ff]"></a>DispShow_NetState</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, dwin_com_pro.o(i.DispShow_NetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = DispShow_NetState &rArr; PrintIcon &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCSQNum
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[1e4]"></a>DispShow_Recode</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, dwin_com_pro.o(i.DispShow_Recode))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = DispShow_Recode &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
</UL>

<P><STRONG><a name="[203]"></a>Disp_ShowRTC</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Disp_ShowRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = Disp_ShowRTC &rArr; Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[141]"></a>Electric_charing</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Electric_charing))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Electric_charing &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>Munu12_CodeDispose</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, dwin_com_pro.o(i.Munu12_CodeDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = Munu12_CodeDispose &rArr; Disp_Showsettime &rArr; Dis_SYSShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Showsettime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>Munu13_DevnumDispose</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dwin_com_pro.o(i.Munu13_DevnumDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = Munu13_DevnumDispose &rArr; Munu13_ShowSysInfo &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>Munu13_IP1Sert</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, dwin_com_pro.o(i.Munu13_IP1Sert))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = Munu13_IP1Sert &rArr; Munu13_ShowSysInfo &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>Munu13_IP2Sert</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dwin_com_pro.o(i.Munu13_IP2Sert))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = Munu13_IP2Sert &rArr; Munu13_ShowSysInfo &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>Munu13_IP3Sert</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dwin_com_pro.o(i.Munu13_IP3Sert))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = Munu13_IP3Sert &rArr; Munu13_ShowSysInfo &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>Munu13_IP4Sert</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dwin_com_pro.o(i.Munu13_IP4Sert))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = Munu13_IP4Sert &rArr; Munu13_ShowSysInfo &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>Munu13_PortSert</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dwin_com_pro.o(i.Munu13_PortSert))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = Munu13_PortSert &rArr; Munu13_ShowSysInfo &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[27d]"></a>Period_WriterFmBill</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dwin_com_pro.o(i.Period_WriterFmBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = Period_WriterFmBill &rArr; APPTransactionrecord &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriterFmBill
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTransactionrecord
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_period_entry
</UL>

<P><STRONG><a name="[143]"></a>Time_charging</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Time_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Time_charging &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>Timing_charging</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, dwin_com_pro.o(i.Timing_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Timing_charging &rArr; DisplayCommonMenu &rArr; PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>dwin_com_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, dwin_com_pro.o(i.dwin_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = dwin_com_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_port_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[66]"></a>dwin_hw_read</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dwin_com_pro.o(i.dwin_hw_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dwin_hw_read &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_uart_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>dwin_hw_write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dwin_com_pro.o(i.dwin_hw_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dwin_hw_write &rArr; rt_device_write &rArr; rt_set_errno &rArr; rt_interrupt_get_nest
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.data)
</UL>
<P><STRONG><a name="[3bc]"></a>dwin_show</STRONG> (Thumb, 624 bytes, Stack size 40 bytes, dwin_com_pro.o(i.dwin_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = dwin_show &rArr; Disp_ShowRTC &rArr; Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_record
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show_bill
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShowRTC
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
</UL>

<P><STRONG><a name="[3bd]"></a>dwin_show_bill</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, dwin_com_pro.o(i.dwin_show_bill))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = dwin_show_bill &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[3be]"></a>dwin_show_record</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, dwin_com_pro.o(i.dwin_show_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = dwin_show_record &rArr; PrintStr &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_show
</UL>

<P><STRONG><a name="[3bf]"></a>dwin_show_state</STRONG> (Thumb, 234 bytes, Stack size 152 bytes, dwin_com_pro.o(i.dwin_show_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = dwin_show_state &rArr; DisplayQRCode &rArr; LCD_SendToUart &rArr; rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
</UL>

<P><STRONG><a name="[3c0]"></a>dwin_uart_read</STRONG> (Thumb, 48 bytes, Stack size 64 bytes, dwin_com_pro.o(i.dwin_uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = dwin_uart_read &rArr; mq_service_dwinrecv_send_disp &rArr; mq_service_send_msg &rArr; rt_mq_send &rArr; rt_mq_send_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mq_service_dwinrecv_send_disp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwin_hw_read
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_period_entry
</UL>

<P><STRONG><a name="[3e3]"></a>flash_para_init</STRONG> (Thumb, 638 bytes, Stack size 24 bytes, dwin_com_pro.o(i.flash_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = flash_para_init &rArr; Clear_record &rArr; Recordqueryinfo_WR &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judge_rete_info
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_record
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dwin_thread_entry
</UL>

<P><STRONG><a name="[3e4]"></a>judge_rete_info</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dwin_com_pro.o(i.judge_rete_info))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_para_init
</UL>

<P><STRONG><a name="[140]"></a>passwordmodify</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dwin_com_pro.o(i.passwordmodify))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = passwordmodify &rArr; Munu13_ShowSysInfo &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu13_ShowSysInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>timeSert</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, dwin_com_pro.o(i.timeSert))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = timeSert &rArr; set_time &rArr; time &rArr; get_timeval &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dwin_com_pro.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>erase</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fal_flash_sfud_port.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = erase &rArr; sfud_erase &rArr; sfud_chip_erase &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fal_flash_sfud_port.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = init &rArr; rt_sfud_flash_find_by_dev_name &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sfud_flash_find_by_dev_name
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fal_flash_sfud_port.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = read &rArr; sfud_read &rArr; wait_busy &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fal_flash_sfud_port.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = write &rArr; sfud_write &rArr; aai_write &rArr; page256_or_1_byte_write &rArr; set_write_enabled &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sfud_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_flash_sfud_port.o(.data)
</UL>
<P><STRONG><a name="[166]"></a>fal</STRONG> (Thumb, 2092 bytes, Stack size 96 bytes, fal_rtt.o(i.fal))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = fal &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strcmp
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_init_check
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_show_part_table
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_flash_device_find
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_find
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(FSymTab)
</UL>
<P><STRONG><a name="[147]"></a>mtd_nor_dev_erase</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fal_rtt.o(i.mtd_nor_dev_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = mtd_nor_dev_erase &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>mtd_nor_dev_read</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, fal_rtt.o(i.mtd_nor_dev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = mtd_nor_dev_read &rArr; fal_partition_read &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>mtd_nor_dev_write</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, fal_rtt.o(i.mtd_nor_dev_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = mtd_nor_dev_write &rArr; fal_partition_write &rArr; spiflash_write &rArr; spiflash_read &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fal_partition_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fal_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>finsh_rx_ind</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(i.finsh_rx_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(i.finsh_set_device)
</UL>
<P><STRONG><a name="[3db]"></a>shell_auto_complete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(i.shell_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = shell_auto_complete &rArr; msh_auto_complete &rArr; msh_help &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3da]"></a>shell_handle_history</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, shell.o(i.shell_handle_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_prompt
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3dd]"></a>shell_push_history</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, shell.o(i.shell_push_history))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shell_push_history &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2e5]"></a>_msh_exec_cmd</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, msh.o(i._msh_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _msh_exec_cmd &rArr; msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_split
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_get_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_exec
</UL>

<P><STRONG><a name="[2e6]"></a>msh_get_cmd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, msh.o(i.msh_get_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = msh_get_cmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[2e8]"></a>msh_split</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, msh.o(i.msh_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = msh_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_msh_exec_cmd
</UL>

<P><STRONG><a name="[414]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, msh.o(i.str_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msh_auto_complete
</UL>

<P><STRONG><a name="[16a]"></a>clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = clear &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[3fd]"></a>list_find_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cmd.o(i.list_find_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_find_init
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[3ff]"></a>list_get_next</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, cmd.o(i.list_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[3fe]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_memheap
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[400]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[401]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[402]"></a>show_wait_queue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[2d8]"></a>_heap_lock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, kservice.o(i._heap_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[2d9]"></a>_heap_unlock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(i._heap_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _heap_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memory_info
</UL>

<P><STRONG><a name="[478]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 60 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[477]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[cc]"></a>_thread_exit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, thread.o(i._thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_enqueue
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._thread_init)
</UL>
<P><STRONG><a name="[301]"></a>_thread_init</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, thread.o(i._thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[cd]"></a>_thread_timeout</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, thread.o(i._thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._thread_init)
</UL>
<P><STRONG><a name="[305]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_timeout
</UL>

<P><STRONG><a name="[307]"></a>_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[309]"></a>_timer_list_next_timeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, timer.o(i._timer_list_next_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_thread_entry
</UL>

<P><STRONG><a name="[30b]"></a>_timer_remove</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i._timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
</UL>

<P><STRONG><a name="[104]"></a>_timer_thread_entry</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, timer.o(i._timer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = _timer_thread_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.rt_system_timer_thread_init)
</UL>
<P><STRONG><a name="[308]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_init
</UL>

<P><STRONG><a name="[467]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
</UL>

<P><STRONG><a name="[30a]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_list_next_timeout
</UL>

<P><STRONG><a name="[30c]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_timer_remove
</UL>

<P><STRONG><a name="[150]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[149]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[15d]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[148]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(i.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[416]"></a>plug_holes</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_smem_free
</UL>

<P><STRONG><a name="[2da]"></a>_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(i._ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>

<P><STRONG><a name="[2dc]"></a>_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(i._ipc_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>

<P><STRONG><a name="[2e0]"></a>_ipc_list_suspend</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ipc.o(i._ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_object_get_type &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
</UL>

<P><STRONG><a name="[2e3]"></a>_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i._ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>

<P><STRONG><a name="[2e4]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_object_init
</UL>

<P><STRONG><a name="[2e2]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_suspend
</UL>

<P><STRONG><a name="[2df]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send_wait
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ipc_list_resume_all
</UL>

<P><STRONG><a name="[2e9]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2f1]"></a>_scheduler_get_highest_priority_thread</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, scheduler.o(i._scheduler_get_highest_priority_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _scheduler_get_highest_priority_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[455]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[456]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[42d]"></a>rt_defunct_execute</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, idle.o(i.rt_defunct_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_defunct_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[105]"></a>rt_thread_idle_entry</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rt_thread_idle_entry &rArr; rt_defunct_execute &rArr; rt_object_delete &rArr; rt_free &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_defunct_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[274]"></a>mfrc522_spi_recv_no_take_no_release</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, mfrc522.o(i.mfrc522_spi_recv_no_take_no_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mfrc522_spi_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadReg_Byte
</UL>

<P><STRONG><a name="[273]"></a>mfrc522_spi_send_no_take_no_release</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, mfrc522.o(i.mfrc522_spi_send_no_take_no_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = mfrc522_spi_send_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteReg_Byte
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadReg_Byte
</UL>

<P><STRONG><a name="[275]"></a>mfrc522_spi_send_then_recv_no_take_no_release</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, mfrc522.o(i.mfrc522_spi_send_then_recv_no_take_no_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = mfrc522_spi_send_then_recv_no_take_no_release &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
</UL>

<P><STRONG><a name="[c8]"></a>timerout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mfrc522.o(i.timerout))
<BR>[Address Reference Count : 1]<UL><LI> mfrc522.o(i.PCD_Init)
</UL>
<P><STRONG><a name="[152]"></a>rt_hw_spi_rc522_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, mfrc522_rtt_stm32_port.o(i.rt_hw_spi_rc522_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = rt_hw_spi_rc522_init &rArr; rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_object_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pin_mode
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mfrc522_rtt_stm32_port.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[15a]"></a>read_nuid_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, read_nuid.o(i.read_nuid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = read_nuid_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; _heap_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> read_nuid.o(.rti_fn.6)
</UL>
<P><STRONG><a name="[ce]"></a>led_process</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, agile_led.o(i.led_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = led_process &rArr; agile_led_stop &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_stop
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_on
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> agile_led.o(i.agile_led_init)
</UL>
<P><STRONG><a name="[31b]"></a>rt_slist_remove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, agile_led.o(i.rt_slist_remove))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agile_led_stop
</UL>

<P><STRONG><a name="[4b7]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[4aa]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[c6]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
